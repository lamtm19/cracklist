import React, { useState, useEffect } from 'react';
import { doc, updateDoc } from 'firebase/firestore';
import { db } from '../firebase';

const LETTERS = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'];

const THEMES_LIST = [
  "Pr√©nom masculin", "Pr√©nom f√©minin", "Ville", "Pays", "Continent", "Animal", 
  "Fruit", "L√©gume", "M√©tier", "Objet", "Couleur", "Sport", "Film", "S√©rie", 
  "Chanson", "Marque", "Moyen de transport", "Instrument de musique", "Langue", 
  "Livre", "Dessin anim√©", "Invention", "Monument", "Fleuve ou rivi√®re", "Oiseau", 
  "Insecte", "Plante ou arbre", "Pi√®ce de la maison", "Partie du corps", 
  "Alimentation", "Boisson", "Marque de v√™tements", "√âmotion", "Super-h√©ros", 
  "Pok√©mon", "Pays qui commence par‚Ä¶", "Film de Disney", "Animal marin", 
  "Animal de la savane", "Animal de compagnie", "Pays en Europe", "Pays en Afrique", 
  "Ville fran√ßaise", "Ville am√©ricaine", "Objet √©lectronique", "Pays o√π il fait chaud", 
  "Pays avec une mer", "Profession m√©dicale", "Marque de voiture", "√âquipe de foot", 
  "Personnage de manga", "Jeu vid√©o", "Appli mobile", "Nom de famille courant", 
  "Chiffre ou nombre", "Mot en anglais", "Mot en fran√ßais", "Signe du zodiaque", 
  "Emoji connu", "Appareil √©lectrom√©nager", "Nom de star internationale", 
  "Nom de star fran√ßaise", "Personnage historique", "Nom de dinosaure", 
  "√âl√©ment chimique", "Forme g√©om√©trique", "Langue morte", 
  "Pays commen√ßant par une voyelle", "Mot avec 3 lettres", "Mot avec 5 lettres", 
  "Animal volant", "Pays limitrophe de la France", "Ville avec une plage", 
  "M√©tier en rapport avec l'√©cole", "M√©tier en rapport avec la police", 
  "M√©tier en rapport avec les animaux", "M√©tier qu'on voit √† la t√©l√©", 
  "Chanson connue", "Groupe de musique", "Chiffre impair", "Couleur primaire", 
  "Style musical", "Accessoire de mode", "Pays ayant gagn√© la Coupe du Monde", 
  "Mot finissant par -ette", "Mot finissant par -oir", "Mot qui rime avec \"chat\"", 
  "Mot qui rime avec \"on\""
];

function generateCards() {
  const cards = [];
  
  // 8 cartes lettres al√©atoires
  for (let i = 0; i < 5; i++) {
    cards.push({
      type: 'letter',
      letter: LETTERS[Math.floor(Math.random() * LETTERS.length)],
      id: `letter_${i}_${Date.now()}`
    });
  }
  
  // 1 joker
  cards.push({
    type: 'joker',
    id: `joker_${Date.now()}`
  });
  
  // 1 carte sp√©ciale al√©atoire
  const specialCards = ['reverse', 'swap', 'stop'];
  cards.push({
    type: specialCards[Math.floor(Math.random() * specialCards.length)],
    id: `special_${Date.now()}`
  });
  
  // 1 carte Crakitoko avec 3 th√®mes al√©atoires
  const shuffledThemes = [...THEMES_LIST].sort(() => 0.5 - Math.random());
  cards.push({
    type: 'crakitoko',
    themes: shuffledThemes.slice(0, 3),
    id: `crakitoko_${Date.now()}`
  });
  
  return cards;
}

function Lobby({ roomCode, playerName, playerId, roomData, onLeaveRoom }) {
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');

  // Debug logs
  console.log('üè† Lobby - roomData re√ßue:', roomData);
  console.log('üè† Lobby - players:', roomData?.players);
  console.log('üë§ Lobby - playerId:', playerId);

  // Normaliser players pour qu'il soit toujours un Array valide
  const normalizedPlayers = React.useMemo(() => {
    if (!roomData?.players) return [];
    
    // Si c'est d√©j√† un Array, le retourner
    if (Array.isArray(roomData.players)) {
      // V√©rifier que tous les joueurs ont les propri√©t√©s n√©cessaires
      return roomData.players.filter(p => p && p.id && p.name);
    }
    
    // Si c'est un Object, le convertir en Array avec plus de soin
    if (typeof roomData.players === 'object') {
      console.log('üîß Conversion Object vers Array');
      const playersArray = Object.values(roomData.players)
        .filter(p => p && typeof p === 'object' && p.id && p.name);
      
      console.log('üîß Joueurs apr√®s filtrage:', playersArray);
      return playersArray;
    }
    
    return [];
  }, [roomData?.players]);

  console.log('üîß Players normalis√©s:', normalizedPlayers);

  const isHost = normalizedPlayers.find(p => p.id === playerId)?.isHost || false;
  const canStart = normalizedPlayers.length >= 2;

  console.log('üëë Lobby - isHost:', isHost);
  console.log('‚ñ∂Ô∏è Lobby - canStart:', canStart);

  useEffect(() => {
    // Ne plus mettre √† jour la pr√©sence si le jeu a commenc√©
    if (roomData?.gameStarted) {
      return; // Pas de mise √† jour pendant le jeu
    }

    // Mettre √† jour la pr√©sence du joueur seulement dans le lobby
    const updatePresence = async () => {
      if (roomData && normalizedPlayers.length > 0) {
        const playerIndex = normalizedPlayers.findIndex(p => p.id === playerId);
        if (playerIndex !== -1) {
          // SOLUTION RADICALE: Toujours r√©√©crire le tableau complet pour √©viter la corruption
          const updatedPlayers = [...normalizedPlayers];
          updatedPlayers[playerIndex] = {
            ...updatedPlayers[playerIndex],
            lastSeen: Date.now(),
            connected: true
          };
          
          // S'assurer qu'il y a au moins un h√¥te
          if (!updatedPlayers.some(p => p.isHost)) {
            updatedPlayers[0].isHost = true;
            console.log('üëë Attribution forc√©e des droits d\'h√¥te au premier joueur');
          }
          
          await updateDoc(doc(db, 'rooms', roomCode), {
            players: updatedPlayers
          });
          console.log('‚úÖ Pr√©sence mise √† jour avec tableau complet');
        }
      }
    };

    updatePresence();
    const interval = setInterval(updatePresence, 15000); // Toutes les 15 secondes

    return () => clearInterval(interval);
  }, [roomCode, playerId, normalizedPlayers, roomData]);

  const startGame = async () => {
    if (!canStart) {
      setError('Il faut au moins 2 joueurs pour commencer');
      return;
    }

    setLoading(true);
    setError('');

    try {
      // Choisir un joueur al√©atoire pour choisir le th√®me initial
      const randomPlayerIndex = Math.floor(Math.random() * normalizedPlayers.length);
      
      // Pr√©parer les joueurs pour le jeu (avec toutes leurs cartes)
      const gamePlayers = normalizedPlayers.map(player => ({
        ...player,
        cards: player.cards || generateCards() // S'assurer que chaque joueur a des cartes
      }));
      
      // Cr√©er une carte Crakitoko avec 3 th√®mes pour la s√©lection initiale
      const shuffledThemes = [...THEMES_LIST].sort(() => 0.5 - Math.random());
      const initialThemeChoices = shuffledThemes.slice(0, 3);
      
      console.log('üéØ D√©marrage partie avec th√®mes:', initialThemeChoices);
      
      await updateDoc(doc(db, 'rooms', roomCode), {
        gameStarted: true,
        currentPlayerIndex: randomPlayerIndex,
        themeSelectionPhase: true,
        gamePhase: 'theme-selection',
        currentRound: 1,
        gameStartTime: Date.now(),
        themeChoices: initialThemeChoices,
        players: gamePlayers // Assurer la coh√©rence
      });
      
      console.log('‚úÖ Partie d√©marr√©e avec succ√®s');
    } catch (err) {
      setError('Erreur lors du d√©marrage de la partie');
      console.error('üí• Erreur startGame:', err);
    }

    setLoading(false);
  };

  const leaveRoom = async () => {
    try {
      if (roomData && normalizedPlayers.length > 0) {
        const updatedPlayers = normalizedPlayers.filter(p => p.id !== playerId);
        
        if (updatedPlayers.length === 0) {
          // Supprimer la room si plus de joueurs
          // Note: Vous pourriez vouloir impl√©menter une fonction cloud pour nettoyer automatiquement
        } else {
          // Si l'h√¥te part, donner les droits d'h√¥te au premier joueur restant
          if (isHost && updatedPlayers.length > 0) {
            updatedPlayers[0].isHost = true;
          }
          
          // Toujours r√©√©crire le tableau complet
          await updateDoc(doc(db, 'rooms', roomCode), {
            players: updatedPlayers
          });
        }
      }
    } catch (err) {
      console.error('Erreur lors de la sortie de la room:', err);
    }
    
    onLeaveRoom();
  };

  if (!roomData) {
    return <div className="loading">Chargement...</div>;
  }

  return (
    <div className="lobby">
      <div className="lobby-container">
        <div className="lobby-header">
          <h1>üéÆ Salle: {roomCode}</h1>
          <button onClick={leaveRoom} className="btn btn-danger leave-btn">
            Quitter
          </button>
        </div>

        <div className="players-section">
          <h2>üë• Joueurs ({normalizedPlayers.length}/10)</h2>
          <div className="players-list">
            {normalizedPlayers.length > 0 ? normalizedPlayers.map((player, index) => {
              console.log('üé≠ Rendu joueur:', player.name, 'isHost:', player.isHost);
              return (
                <div key={player.id} className={`player-card ${!player.connected ? 'disconnected' : ''}`}>
                  <span className="player-name">
                    {player.name}
                    {player.isHost && <span className="host-badge">üëë</span>}
                    {!player.connected && <span className="disconnect-badge">üì¥</span>}
                  </span>
                </div>
              );
            }) : (
              <div>Chargement des joueurs...</div>
            )}
          </div>
        </div>

        {isHost && (
          <div className="host-controls">
            <h3>üéØ Contr√¥les d'h√¥te</h3>
            
            {!canStart && (
              <p className="warning">Il faut au moins 2 joueurs pour commencer la partie.</p>
            )}
            
            <button 
              onClick={startGame}
              disabled={!canStart || loading}
              className="btn btn-primary start-btn"
            >
              {loading ? 'D√©marrage...' : 'Commencer la partie'}
            </button>
            
            {error && <div className="error-message">{error}</div>}
          </div>
        )}

        {!isHost && (
          <div className="waiting-message">
            <p>‚è≥ En attente que l'h√¥te lance la partie...</p>
          </div>
        )}

        <div className="lobby-info">
          <h3>üìã Informations</h3>
          <ul>
            <li>üéØ Objectif : Se d√©barrasser de toutes ses cartes en premier !</li>
            <li>‚è±Ô∏è 15 secondes pour jouer, 5 secondes pour voter</li>
            <li>üÉè Utilisez les cartes sp√©ciales √† bon escient</li>
            <li>üèÜ Le premier sans cartes gagne !</li>
            <li>üë• Les joueurs sans cartes continuent √† regarder</li>
          </ul>
        </div>
      </div>
    </div>
  );
}

export default Lobby;