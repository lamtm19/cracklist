{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\lamtm\\\\Downloads\\\\cracklist-web\\\\src\\\\components\\\\Game.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { doc, updateDoc } from 'firebase/firestore';\nimport { db } from '../firebase';\nimport CurrentTheme from './CurrentTheme';\nimport Timer from './Timer';\nimport WinnerPanel from './WinnerPanel';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst LETTER_PENALTIES = {\n  'A': 0,\n  'B': 0,\n  'C': 0,\n  'D': 0,\n  'F': 0,\n  'G': 0,\n  'L': 0,\n  'M': 0,\n  'N': 0,\n  'P': 0,\n  'R': 0,\n  'S': 0,\n  'T': 0,\n  'V': 0,\n  'E': 1,\n  'I': 1,\n  'J': 1,\n  'O': 1,\n  'H': 2,\n  'K': 2,\n  'U': 2,\n  'Y': 2,\n  'Q': 3,\n  'W': 3,\n  'X': 3,\n  'Z': 3\n};\nfunction Game({\n  roomCode,\n  playerName,\n  playerId,\n  roomData,\n  onLeaveRoom\n}) {\n  _s();\n  var _roomData$themeChoice, _roomData$players;\n  const [selectedCard, setSelectedCard] = useState(null);\n  const [userWord, setUserWord] = useState('');\n  const [jokerLetter, setJokerLetter] = useState('');\n  const [swapTarget, setSwapTarget] = useState('');\n  const [swapMode, setSwapMode] = useState('single'); // 'single' ou 'all'\n  const [vote, setVote] = useState(null);\n  const [loading, setLoading] = useState(false);\n  console.log('🎮 Game - roomData:', roomData);\n  console.log('🎮 Game - players brut:', roomData === null || roomData === void 0 ? void 0 : roomData.players);\n  console.log('🎮 Game - gamePhase:', roomData === null || roomData === void 0 ? void 0 : roomData.gamePhase);\n  console.log('🎮 Game - themeSelectionPhase:', roomData === null || roomData === void 0 ? void 0 : roomData.themeSelectionPhase);\n  console.log('🎮 Game - currentTheme:', roomData === null || roomData === void 0 ? void 0 : roomData.currentTheme);\n\n  // Normaliser players pour qu'il soit toujours un Array valide (même logique que Lobby)\n  const normalizedPlayers = React.useMemo(() => {\n    if (!(roomData !== null && roomData !== void 0 && roomData.players)) return [];\n\n    // Si c'est déjà un Array, le retourner (avec filtrage minimal)\n    if (Array.isArray(roomData.players)) {\n      console.log('🔧 Game - Players reçus (Array):', roomData.players);\n      // Filtrer seulement les joueurs vraiment invalides\n      const validPlayers = roomData.players.filter(p => p && (p.id || p.name));\n      console.log('🔧 Game - Players après filtrage minimal:', validPlayers);\n      return validPlayers;\n    }\n\n    // Si c'est un Object, le convertir en Array avec plus de soin\n    if (typeof roomData.players === 'object') {\n      console.log('🔧 Game - Conversion Object vers Array');\n      console.log('🔧 Game - Players reçus (Object):', roomData.players);\n      const playersArray = Object.values(roomData.players).filter(p => p && typeof p === 'object' && (p.id || p.name));\n      console.log('🔧 Game - Joueurs après filtrage:', playersArray);\n      return playersArray;\n    }\n    return [];\n  }, [roomData === null || roomData === void 0 ? void 0 : roomData.players]);\n  const currentPlayer = normalizedPlayers.length > 0 && (roomData === null || roomData === void 0 ? void 0 : roomData.currentPlayerIndex) !== undefined ? normalizedPlayers[roomData.currentPlayerIndex] : null;\n  const isMyTurn = (currentPlayer === null || currentPlayer === void 0 ? void 0 : currentPlayer.id) === playerId;\n  const myPlayer = normalizedPlayers.find(p => p.id === playerId) || null;\n  const gamePhase = (roomData === null || roomData === void 0 ? void 0 : roomData.gamePhase) || 'theme-selection';\n  console.log('🎮 Game - normalizedPlayers:', normalizedPlayers.length);\n  console.log('🎮 Game - currentPlayerIndex:', roomData === null || roomData === void 0 ? void 0 : roomData.currentPlayerIndex);\n  console.log('🎮 Game - currentPlayer:', currentPlayer === null || currentPlayer === void 0 ? void 0 : currentPlayer.name);\n  console.log('🎮 Game - isMyTurn:', isMyTurn);\n  console.log('🎮 Game - myPlayer:', myPlayer === null || myPlayer === void 0 ? void 0 : myPlayer.name);\n  useEffect(() => {\n    // Gérer les déconnexions\n    const handleDisconnection = async () => {\n      if (roomData && myPlayer && roomData.players && Array.isArray(roomData.players)) {\n        const playerIndex = roomData.players.findIndex(p => p.id === playerId);\n        if (playerIndex !== -1) {\n          await updateDoc(doc(db, 'rooms', roomCode), {\n            [`players.${playerIndex}.lastSeen`]: Date.now(),\n            [`players.${playerIndex}.connected`]: true\n          });\n        }\n      }\n    };\n    handleDisconnection();\n    const interval = setInterval(handleDisconnection, 5000);\n    return () => clearInterval(interval);\n  }, [roomCode, playerId, roomData, myPlayer]);\n\n  // Vérifier s'il y a un gagnant (premier joueur sans cartes)\n  const playersWithCards = normalizedPlayers.filter(p => p.cards && p.cards.length > 0);\n  const playersWithoutCards = normalizedPlayers.filter(p => !p.cards || p.cards.length === 0);\n\n  // Le gagnant est le premier joueur qui n'a plus de cartes (seulement si la partie a commencé)\n  const firstWinner = playersWithoutCards.length > 0 && roomData !== null && roomData !== void 0 && roomData.gameStarted ? playersWithoutCards[0] : null;\n  // La partie se termine quand il ne reste qu'un seul joueur avec des cartes\n  const gameEnded = playersWithCards.length <= 1 && (roomData === null || roomData === void 0 ? void 0 : roomData.gameStarted) && playersWithoutCards.length > 0;\n  const selectTheme = async theme => {\n    setLoading(true);\n    try {\n      await updateDoc(doc(db, 'rooms', roomCode), {\n        currentTheme: theme,\n        gamePhase: 'playing',\n        themeSelectionPhase: false,\n        currentTurnStartTime: Date.now()\n      });\n    } catch (err) {\n      console.error('Erreur lors de la sélection du thème:', err);\n    }\n    setLoading(false);\n  };\n  const playCard = async () => {\n    if (!selectedCard || loading) return;\n    setLoading(true);\n    try {\n      if (!(roomData !== null && roomData !== void 0 && roomData.players) || !Array.isArray(roomData.players) || !(myPlayer !== null && myPlayer !== void 0 && myPlayer.cards)) {\n        setLoading(false);\n        return;\n      }\n      const myPlayerIndex = roomData.players.findIndex(p => p.id === playerId);\n      const myCards = [...myPlayer.cards];\n      const cardIndex = myCards.findIndex(c => c.id === selectedCard.id);\n      if (cardIndex === -1) return;\n      let updates = {};\n      let nextPhase = 'voting';\n\n      // Retirer la carte jouée\n      myCards.splice(cardIndex, 1);\n      updates[`players.${myPlayerIndex}.cards`] = myCards;\n\n      // Traiter selon le type de carte\n      if (selectedCard.type === 'letter' || selectedCard.type === 'joker') {\n        if (!userWord.trim()) {\n          setLoading(false);\n          return;\n        }\n        updates.currentPlay = {\n          playerId: playerId,\n          playerName: playerName,\n          card: selectedCard,\n          word: userWord.trim(),\n          jokerLetter: selectedCard.type === 'joker' ? jokerLetter : null,\n          timestamp: Date.now()\n        };\n        updates.gamePhase = 'voting';\n        updates.votingStartTime = Date.now();\n        updates.votes = {};\n      } else if (selectedCard.type === 'reverse') {\n        updates.direction = roomData.direction * -1;\n        nextPhase = 'playing';\n      } else if (selectedCard.type === 'stop') {\n        // Passer le prochain joueur\n        const nextIndex = getNextPlayerIndex(roomData.currentPlayerIndex, roomData.direction, roomData.players.length, roomData.players);\n        const skipIndex = getNextPlayerIndex(nextIndex, roomData.direction, roomData.players.length, roomData.players);\n        updates.currentPlayerIndex = skipIndex;\n        updates.currentTurnStartTime = Date.now();\n        nextPhase = 'playing';\n      } else if (selectedCard.type === 'swap') {\n        if (!swapTarget) {\n          setLoading(false);\n          return;\n        }\n        const targetPlayerIndex = roomData.players.findIndex(p => p.id === swapTarget);\n        if (targetPlayerIndex === -1) {\n          setLoading(false);\n          return;\n        }\n        const targetCards = [...roomData.players[targetPlayerIndex].cards];\n        if (swapMode === 'single') {\n          // Échanger 1 carte aléatoire\n          if (myCards.length > 0 && targetCards.length > 0) {\n            const myRandomIndex = Math.floor(Math.random() * myCards.length);\n            const targetRandomIndex = Math.floor(Math.random() * targetCards.length);\n            const tempCard = myCards[myRandomIndex];\n            myCards[myRandomIndex] = targetCards[targetRandomIndex];\n            targetCards[targetRandomIndex] = tempCard;\n          }\n        } else {\n          // Échanger tous les paquets\n          updates[`players.${myPlayerIndex}.cards`] = targetCards;\n          updates[`players.${targetPlayerIndex}.cards`] = myCards;\n        }\n        if (swapMode === 'single') {\n          updates[`players.${myPlayerIndex}.cards`] = myCards;\n          updates[`players.${targetPlayerIndex}.cards`] = targetCards;\n        }\n        nextPhase = 'playing';\n      } else if (selectedCard.type === 'crakitoko') {\n        updates.themeChoices = selectedCard.themes;\n        updates.gamePhase = 'theme-selection';\n        updates.themeSelectionPhase = true;\n      }\n\n      // Passer au joueur suivant si ce n'est pas un vote\n      if (nextPhase === 'playing') {\n        const nextPlayerIndex = getNextPlayerIndex(roomData.currentPlayerIndex, roomData.direction, roomData.players.length, roomData.players);\n        updates.currentPlayerIndex = nextPlayerIndex;\n        updates.currentTurnStartTime = Date.now();\n      }\n      updates.gamePhase = nextPhase;\n      await updateDoc(doc(db, 'rooms', roomCode), updates);\n\n      // Reset des états locaux\n      setSelectedCard(null);\n      setUserWord('');\n      setJokerLetter('');\n      setSwapTarget('');\n      setSwapMode('single');\n    } catch (err) {\n      console.error('Erreur lors du jeu de la carte:', err);\n    }\n    setLoading(false);\n  };\n  const submitVote = async voteValue => {\n    if (loading || !roomData.currentPlay) return;\n    setLoading(true);\n    try {\n      const votes = {\n        ...roomData.votes\n      };\n      votes[playerId] = voteValue;\n      await updateDoc(doc(db, 'rooms', roomCode), {\n        votes: votes\n      });\n      setVote(voteValue);\n    } catch (err) {\n      console.error('Erreur lors du vote:', err);\n    }\n    setLoading(false);\n  };\n  const processVoteResults = async () => {\n    if (!roomData.currentPlay || !roomData.votes) return;\n    const votes = Object.values(roomData.votes);\n    const approvals = votes.filter(v => v === true).length;\n    const rejections = votes.filter(v => v === false).length;\n    const isApproved = approvals >= rejections;\n    const playedPlayerIndex = roomData.players.findIndex(p => p.id === roomData.currentPlay.playerId);\n    let updates = {};\n    if (!isApproved) {\n      // Réponse refusée - remettre la carte + 1 de la pioche\n      const playerCards = [...roomData.players[playedPlayerIndex].cards];\n      playerCards.push(roomData.currentPlay.card);\n\n      // Ajouter une carte de la pioche\n      if (roomData.deck && roomData.deck.length > 0) {\n        const newCard = roomData.deck[0];\n        const remainingDeck = roomData.deck.slice(1);\n        playerCards.push(newCard);\n        updates.deck = remainingDeck;\n      }\n      updates[`players.${playedPlayerIndex}.cards`] = playerCards;\n    } else {\n      // Réponse acceptée - appliquer les malus si nécessaire\n      const currentPlay = roomData.currentPlay;\n      let penalty = 0;\n      if (currentPlay.card.type === 'letter') {\n        penalty = LETTER_PENALTIES[currentPlay.card.letter] || 0;\n      } else if (currentPlay.card.type === 'joker' && currentPlay.jokerLetter) {\n        penalty = LETTER_PENALTIES[currentPlay.jokerLetter] || 0;\n      }\n\n      // Appliquer le malus au joueur suivant\n      if (penalty > 0) {\n        const nextPlayerIndex = getNextPlayerIndex(roomData.currentPlayerIndex, roomData.direction, roomData.players.length, roomData.players);\n        const nextPlayerCards = [...roomData.players[nextPlayerIndex].cards];\n        for (let i = 0; i < penalty && roomData.deck && roomData.deck.length > 0; i++) {\n          nextPlayerCards.push(roomData.deck[i]);\n        }\n        updates[`players.${nextPlayerIndex}.cards`] = nextPlayerCards;\n        updates.deck = roomData.deck.slice(penalty);\n      }\n    }\n\n    // Passer au joueur suivant\n    const nextPlayerIndex = getNextPlayerIndex(roomData.currentPlayerIndex, roomData.direction, roomData.players.length, roomData.players);\n    updates.currentPlayerIndex = nextPlayerIndex;\n    updates.gamePhase = 'playing';\n    updates.currentPlay = null;\n    updates.votes = {};\n    updates.votingStartTime = null;\n    updates.currentTurnStartTime = Date.now();\n    await updateDoc(doc(db, 'rooms', roomCode), updates);\n  };\n  const handleTimeout = async phase => {\n    if (phase === 'playing' && isMyTurn) {\n      // Timeout pendant le tour du joueur - ajouter une carte\n      const myPlayerIndex = roomData.players.findIndex(p => p.id === playerId);\n      const myCards = [...myPlayer.cards];\n      if (roomData.deck && roomData.deck.length > 0) {\n        myCards.push(roomData.deck[0]);\n        const remainingDeck = roomData.deck.slice(1);\n        const nextPlayerIndex = getNextPlayerIndex(roomData.currentPlayerIndex, roomData.direction, roomData.players.length, roomData.players);\n        await updateDoc(doc(db, 'rooms', roomCode), {\n          [`players.${myPlayerIndex}.cards`]: myCards,\n          deck: remainingDeck,\n          currentPlayerIndex: nextPlayerIndex,\n          currentTurnStartTime: Date.now()\n        });\n      }\n    } else if (phase === 'voting') {\n      // Timeout du vote - traiter les résultats\n      await processVoteResults();\n    }\n  };\n  if ((firstWinner || gameEnded) && (roomData === null || roomData === void 0 ? void 0 : roomData.gamePhase) !== 'theme-selection') {\n    return /*#__PURE__*/_jsxDEV(WinnerPanel, {\n      winner: firstWinner,\n      playersWithoutCards: playersWithoutCards,\n      onLeaveRoom: onLeaveRoom\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 342,\n      columnNumber: 12\n    }, this);\n  }\n  if (!roomData || !myPlayer) {\n    console.log('🎮 Game - Données manquantes, affichage loading');\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"loading\",\n      children: \"Chargement de la partie...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 347,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"game\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"room-info\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"room-code\",\n          children: [\"Salle: \", roomCode]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 354,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: onLeaveRoom,\n          className: \"btn btn-danger leave-btn\",\n          children: \"Quitter\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 355,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 353,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(CurrentTheme, {\n        theme: roomData.currentTheme\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 360,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"players-status\",\n        children: normalizedPlayers.length > 0 ? normalizedPlayers.map((player, index) => {\n          var _player$cards;\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `player-status ${index === roomData.currentPlayerIndex ? 'current-player' : ''}`,\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"player-name\",\n              children: player.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 368,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"cards-count\",\n              children: ((_player$cards = player.cards) === null || _player$cards === void 0 ? void 0 : _player$cards.length) || 0\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 369,\n              columnNumber: 15\n            }, this)]\n          }, player.id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 364,\n            columnNumber: 13\n          }, this);\n        }) : null\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 362,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 352,\n      columnNumber: 7\n    }, this), gamePhase === 'theme-selection' && isMyTurn && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"theme-selection\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"\\uD83C\\uDFAF Choisissez un th\\xE8me\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 378,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"theme-choices\",\n        children: (_roomData$themeChoice = roomData.themeChoices) === null || _roomData$themeChoice === void 0 ? void 0 : _roomData$themeChoice.map((theme, index) => /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => selectTheme(theme),\n          className: \"btn btn-theme\",\n          disabled: loading,\n          children: theme\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 381,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 379,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 377,\n      columnNumber: 9\n    }, this), gamePhase === 'theme-selection' && !isMyTurn && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"waiting-theme\",\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"\\u23F3 \", currentPlayer === null || currentPlayer === void 0 ? void 0 : currentPlayer.name, \" choisit le th\\xE8me...\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 396,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 395,\n      columnNumber: 9\n    }, this), gamePhase === 'playing' && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"playing-phase\",\n      children: [/*#__PURE__*/_jsxDEV(Timer, {\n        duration: 15,\n        onTimeout: () => handleTimeout('playing'),\n        startTime: roomData.currentTurnStartTime,\n        active: isMyTurn\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 403,\n        columnNumber: 11\n      }, this), isMyTurn && myPlayer !== null && myPlayer !== void 0 && myPlayer.cards && myPlayer.cards.length > 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"my-turn\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"\\uD83C\\uDFAE \\xC0 votre tour !\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 412,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"my-cards\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"Vos cartes:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 415,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"cards-grid\",\n            children: myPlayer !== null && myPlayer !== void 0 && myPlayer.cards && Array.isArray(myPlayer.cards) ? myPlayer.cards.map(card => /*#__PURE__*/_jsxDEV(\"div\", {\n              className: `card ${(selectedCard === null || selectedCard === void 0 ? void 0 : selectedCard.id) === card.id ? 'selected' : ''}`,\n              onClick: () => setSelectedCard(card),\n              children: [card.type === 'letter' && /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"letter-card\",\n                children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"letter\",\n                  children: card.letter\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 425,\n                  columnNumber: 27\n                }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"penalty\",\n                  children: [\"+\", LETTER_PENALTIES[card.letter]]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 426,\n                  columnNumber: 27\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 424,\n                columnNumber: 25\n              }, this), card.type === 'joker' && /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"joker-card\",\n                children: \"\\uD83C\\uDCCF JOKER\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 430,\n                columnNumber: 25\n              }, this), card.type === 'reverse' && /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"special-card\",\n                children: \"\\uD83D\\uDD04 SENS\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 433,\n                columnNumber: 25\n              }, this), card.type === 'swap' && /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"special-card\",\n                children: \"\\uD83D\\uDD04 \\xC9CHANGE\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 436,\n                columnNumber: 25\n              }, this), card.type === 'stop' && /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"special-card\",\n                children: \"\\u23F8\\uFE0F STOP\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 439,\n                columnNumber: 25\n              }, this), card.type === 'crakitoko' && /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"crakitoko-card\",\n                children: \"\\uD83C\\uDFAF TH\\xC8ME\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 442,\n                columnNumber: 25\n              }, this)]\n            }, card.id, true, {\n              fileName: _jsxFileName,\n              lineNumber: 418,\n              columnNumber: 21\n            }, this)) : /*#__PURE__*/_jsxDEV(\"div\", {\n              children: \"Aucune carte disponible\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 446,\n              columnNumber: 21\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 416,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 414,\n          columnNumber: 15\n        }, this), selectedCard && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"card-action\",\n          children: [(selectedCard.type === 'letter' || selectedCard.type === 'joker') && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"word-input\",\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              placeholder: \"Votre mot...\",\n              value: userWord,\n              onChange: e => setUserWord(e.target.value),\n              className: \"input-field\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 455,\n              columnNumber: 23\n            }, this), selectedCard.type === 'joker' && /*#__PURE__*/_jsxDEV(\"select\", {\n              value: jokerLetter,\n              onChange: e => setJokerLetter(e.target.value),\n              className: \"select-field\",\n              children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"\",\n                children: \"Choisir une lettre\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 469,\n                columnNumber: 27\n              }, this), Object.keys(LETTER_PENALTIES).map(letter => /*#__PURE__*/_jsxDEV(\"option\", {\n                value: letter,\n                children: [letter, \" (+\", LETTER_PENALTIES[letter], \")\"]\n              }, letter, true, {\n                fileName: _jsxFileName,\n                lineNumber: 471,\n                columnNumber: 29\n              }, this))]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 464,\n              columnNumber: 25\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 454,\n            columnNumber: 21\n          }, this), selectedCard.type === 'swap' && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"swap-controls\",\n            children: [/*#__PURE__*/_jsxDEV(\"select\", {\n              value: swapTarget,\n              onChange: e => setSwapTarget(e.target.value),\n              className: \"select-field\",\n              children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"\",\n                children: \"Choisir un joueur\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 487,\n                columnNumber: 25\n              }, this), roomData.players && Array.isArray(roomData.players) ? roomData.players.filter(p => p.id !== playerId).map(player => {\n                var _player$cards2;\n                return /*#__PURE__*/_jsxDEV(\"option\", {\n                  value: player.id,\n                  children: [player.name, \" (\", ((_player$cards2 = player.cards) === null || _player$cards2 === void 0 ? void 0 : _player$cards2.length) || 0, \" cartes)\"]\n                }, player.id, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 492,\n                  columnNumber: 31\n                }, this);\n              }) : null]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 482,\n              columnNumber: 23\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"swap-mode\",\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"radio\",\n                  name: \"swapMode\",\n                  value: \"single\",\n                  checked: swapMode === 'single',\n                  onChange: e => setSwapMode(e.target.value)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 502,\n                  columnNumber: 27\n                }, this), \"1 carte\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 501,\n                columnNumber: 25\n              }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n                children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"radio\",\n                  name: \"swapMode\",\n                  value: \"all\",\n                  checked: swapMode === 'all',\n                  onChange: e => setSwapMode(e.target.value)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 512,\n                  columnNumber: 27\n                }, this), \"Tout le paquet\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 511,\n                columnNumber: 25\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 500,\n              columnNumber: 23\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 481,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: playCard,\n            disabled: loading || (selectedCard.type === 'letter' || selectedCard.type === 'joker') && !userWord.trim() || selectedCard.type === 'joker' && !jokerLetter || selectedCard.type === 'swap' && !swapTarget,\n            className: \"btn btn-primary play-btn\",\n            children: loading ? 'Jouer...' : 'Jouer la carte'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 525,\n            columnNumber: 19\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 452,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 411,\n        columnNumber: 13\n      }, this) : isMyTurn && myPlayer !== null && myPlayer !== void 0 && myPlayer.cards && myPlayer.cards.length === 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"finished-player\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"\\uD83C\\uDF89 Vous avez termin\\xE9 !\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 541,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Vous n'avez plus de cartes. Regardez les autres joueurs finir la partie.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 542,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 540,\n        columnNumber: 13\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"waiting-turn\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"\\u23F3 C'est au tour de \", /*#__PURE__*/_jsxDEV(\"strong\", {\n            children: currentPlayer === null || currentPlayer === void 0 ? void 0 : currentPlayer.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 546,\n            columnNumber: 37\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 546,\n          columnNumber: 15\n        }, this), (myPlayer === null || myPlayer === void 0 ? void 0 : myPlayer.cards) && myPlayer.cards.length === 0 && /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"finished-status\",\n          children: \"\\uD83C\\uDF89 Vous avez termin\\xE9 la partie !\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 548,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 545,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 402,\n      columnNumber: 9\n    }, this), gamePhase === 'voting' && roomData.currentPlay && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"voting-phase\",\n      children: [/*#__PURE__*/_jsxDEV(Timer, {\n        duration: 5,\n        onTimeout: () => handleTimeout('voting'),\n        startTime: roomData.votingStartTime,\n        active: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 558,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"current-play\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"\\uD83D\\uDDF3\\uFE0F Vote en cours\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 566,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"play-info\",\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: roomData.currentPlay.playerName\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 568,\n              columnNumber: 18\n            }, this), \" a jou\\xE9:\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 568,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"played-card\",\n            children: [roomData.currentPlay.card.type === 'letter' && /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"letter\",\n              children: roomData.currentPlay.card.letter\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 571,\n              columnNumber: 19\n            }, this), roomData.currentPlay.card.type === 'joker' && /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"joker\",\n              children: [\"\\uD83C\\uDCCF \\u2192 \", roomData.currentPlay.jokerLetter]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 574,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 569,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"word-played\",\n            children: [\"Mot: \", /*#__PURE__*/_jsxDEV(\"strong\", {\n              children: roomData.currentPlay.word\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 577,\n              columnNumber: 47\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 577,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 567,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 565,\n        columnNumber: 11\n      }, this), roomData.currentPlay.playerId !== playerId && myPlayer !== null && myPlayer !== void 0 && myPlayer.cards && myPlayer.cards.length > 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"vote-buttons\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => submitVote(true),\n          disabled: loading || vote !== null,\n          className: \"btn btn-success vote-btn\",\n          children: \"\\u2705 Valide\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 583,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => submitVote(false),\n          disabled: loading || vote !== null,\n          className: \"btn btn-danger vote-btn\",\n          children: \"\\u274C Invalide\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 590,\n          columnNumber: 15\n        }, this), vote !== null && /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"vote-submitted\",\n          children: [\"Votre vote: \", vote ? '✅ Valide' : '❌ Invalide']\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 598,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 582,\n        columnNumber: 13\n      }, this) : myPlayer !== null && myPlayer !== void 0 && myPlayer.cards && myPlayer.cards.length === 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"cannot-vote\",\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"\\uD83C\\uDF89 Vous avez termin\\xE9 ! Vous ne pouvez plus voter.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 605,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 604,\n        columnNumber: 13\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"cannot-vote\",\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"\\u23F3 Vous ne pouvez pas voter sur votre propre r\\xE9ponse.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 609,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 608,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"vote-progress\",\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Votes re\\xE7us: \", Object.keys(roomData.votes || {}).length, \"/\", Math.max(1, (((_roomData$players = roomData.players) === null || _roomData$players === void 0 ? void 0 : _roomData$players.filter(p => p.cards && p.cards.length > 0).length) || 1) - 1)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 614,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 613,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 557,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 351,\n    columnNumber: 5\n  }, this);\n}\n_s(Game, \"IO9ZsgM09Fxfm5ptdKG7QU9ZPvg=\");\n_c = Game;\nfunction getNextPlayerIndex(currentIndex, direction, totalPlayers, players) {\n  let nextIndex = currentIndex;\n  let attempts = 0;\n  do {\n    if (direction === 1) {\n      nextIndex = (nextIndex + 1) % totalPlayers;\n    } else {\n      nextIndex = nextIndex === 0 ? totalPlayers - 1 : nextIndex - 1;\n    }\n    attempts++;\n  } while (attempts < totalPlayers && (!players[nextIndex] || !players[nextIndex].cards || players[nextIndex].cards.length === 0));\n  return nextIndex;\n}\nexport default Game;\nvar _c;\n$RefreshReg$(_c, \"Game\");","map":{"version":3,"names":["React","useState","useEffect","doc","updateDoc","db","CurrentTheme","Timer","WinnerPanel","jsxDEV","_jsxDEV","LETTER_PENALTIES","Game","roomCode","playerName","playerId","roomData","onLeaveRoom","_s","_roomData$themeChoice","_roomData$players","selectedCard","setSelectedCard","userWord","setUserWord","jokerLetter","setJokerLetter","swapTarget","setSwapTarget","swapMode","setSwapMode","vote","setVote","loading","setLoading","console","log","players","gamePhase","themeSelectionPhase","currentTheme","normalizedPlayers","useMemo","Array","isArray","validPlayers","filter","p","id","name","playersArray","Object","values","currentPlayer","length","currentPlayerIndex","undefined","isMyTurn","myPlayer","find","handleDisconnection","playerIndex","findIndex","Date","now","interval","setInterval","clearInterval","playersWithCards","cards","playersWithoutCards","firstWinner","gameStarted","gameEnded","selectTheme","theme","currentTurnStartTime","err","error","playCard","myPlayerIndex","myCards","cardIndex","c","updates","nextPhase","splice","type","trim","currentPlay","card","word","timestamp","votingStartTime","votes","direction","nextIndex","getNextPlayerIndex","skipIndex","targetPlayerIndex","targetCards","myRandomIndex","Math","floor","random","targetRandomIndex","tempCard","themeChoices","themes","nextPlayerIndex","submitVote","voteValue","processVoteResults","approvals","v","rejections","isApproved","playedPlayerIndex","playerCards","push","deck","newCard","remainingDeck","slice","penalty","letter","nextPlayerCards","i","handleTimeout","phase","winner","fileName","_jsxFileName","lineNumber","columnNumber","className","children","onClick","map","player","index","_player$cards","disabled","duration","onTimeout","startTime","active","placeholder","value","onChange","e","target","keys","_player$cards2","checked","max","_c","currentIndex","totalPlayers","attempts","$RefreshReg$"],"sources":["C:/Users/lamtm/Downloads/cracklist-web/src/components/Game.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { doc, updateDoc } from 'firebase/firestore';\r\nimport { db } from '../firebase';\r\nimport CurrentTheme from './CurrentTheme';\r\nimport Timer from './Timer';\r\nimport WinnerPanel from './WinnerPanel';\r\n\r\nconst LETTER_PENALTIES = {\r\n  'A': 0, 'B': 0, 'C': 0, 'D': 0, 'F': 0, 'G': 0, 'L': 0, 'M': 0, 'N': 0, 'P': 0, 'R': 0, 'S': 0, 'T': 0, 'V': 0,\r\n  'E': 1, 'I': 1, 'J': 1, 'O': 1,\r\n  'H': 2, 'K': 2, 'U': 2, 'Y': 2,\r\n  'Q': 3, 'W': 3, 'X': 3, 'Z': 3\r\n};\r\n\r\nfunction Game({ roomCode, playerName, playerId, roomData, onLeaveRoom }) {\r\n  const [selectedCard, setSelectedCard] = useState(null);\r\n  const [userWord, setUserWord] = useState('');\r\n  const [jokerLetter, setJokerLetter] = useState('');\r\n  const [swapTarget, setSwapTarget] = useState('');\r\n  const [swapMode, setSwapMode] = useState('single'); // 'single' ou 'all'\r\n  const [vote, setVote] = useState(null);\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  console.log('🎮 Game - roomData:', roomData);\r\n  console.log('🎮 Game - players brut:', roomData?.players);\r\n  console.log('🎮 Game - gamePhase:', roomData?.gamePhase);\r\n  console.log('🎮 Game - themeSelectionPhase:', roomData?.themeSelectionPhase);\r\n  console.log('🎮 Game - currentTheme:', roomData?.currentTheme);\r\n\r\n  // Normaliser players pour qu'il soit toujours un Array valide (même logique que Lobby)\r\n  const normalizedPlayers = React.useMemo(() => {\r\n    if (!roomData?.players) return [];\r\n    \r\n    // Si c'est déjà un Array, le retourner (avec filtrage minimal)\r\n    if (Array.isArray(roomData.players)) {\r\n      console.log('🔧 Game - Players reçus (Array):', roomData.players);\r\n      // Filtrer seulement les joueurs vraiment invalides\r\n      const validPlayers = roomData.players.filter(p => p && (p.id || p.name));\r\n      console.log('🔧 Game - Players après filtrage minimal:', validPlayers);\r\n      return validPlayers;\r\n    }\r\n    \r\n    // Si c'est un Object, le convertir en Array avec plus de soin\r\n    if (typeof roomData.players === 'object') {\r\n      console.log('🔧 Game - Conversion Object vers Array');\r\n      console.log('🔧 Game - Players reçus (Object):', roomData.players);\r\n      const playersArray = Object.values(roomData.players)\r\n        .filter(p => p && typeof p === 'object' && (p.id || p.name));\r\n      \r\n      console.log('🔧 Game - Joueurs après filtrage:', playersArray);\r\n      return playersArray;\r\n    }\r\n    \r\n    return [];\r\n  }, [roomData?.players]);\r\n\r\n  const currentPlayer = normalizedPlayers.length > 0 && roomData?.currentPlayerIndex !== undefined\r\n    ? normalizedPlayers[roomData.currentPlayerIndex] \r\n    : null;\r\n  const isMyTurn = currentPlayer?.id === playerId;\r\n  const myPlayer = normalizedPlayers.find(p => p.id === playerId) || null;\r\n  const gamePhase = roomData?.gamePhase || 'theme-selection';\r\n  \r\n  console.log('🎮 Game - normalizedPlayers:', normalizedPlayers.length);\r\n  console.log('🎮 Game - currentPlayerIndex:', roomData?.currentPlayerIndex);\r\n  console.log('🎮 Game - currentPlayer:', currentPlayer?.name);\r\n  console.log('🎮 Game - isMyTurn:', isMyTurn);\r\n  console.log('🎮 Game - myPlayer:', myPlayer?.name);\r\n\r\n  useEffect(() => {\r\n    // Gérer les déconnexions\r\n    const handleDisconnection = async () => {\r\n      if (roomData && myPlayer && roomData.players && Array.isArray(roomData.players)) {\r\n        const playerIndex = roomData.players.findIndex(p => p.id === playerId);\r\n        if (playerIndex !== -1) {\r\n          await updateDoc(doc(db, 'rooms', roomCode), {\r\n            [`players.${playerIndex}.lastSeen`]: Date.now(),\r\n            [`players.${playerIndex}.connected`]: true\r\n          });\r\n        }\r\n      }\r\n    };\r\n\r\n    handleDisconnection();\r\n    const interval = setInterval(handleDisconnection, 5000);\r\n\r\n    return () => clearInterval(interval);\r\n  }, [roomCode, playerId, roomData, myPlayer]);\r\n\r\n  // Vérifier s'il y a un gagnant (premier joueur sans cartes)\r\n  const playersWithCards = normalizedPlayers.filter(p => p.cards && p.cards.length > 0);\r\n  const playersWithoutCards = normalizedPlayers.filter(p => !p.cards || p.cards.length === 0);\r\n  \r\n  // Le gagnant est le premier joueur qui n'a plus de cartes (seulement si la partie a commencé)\r\n  const firstWinner = playersWithoutCards.length > 0 && roomData?.gameStarted ? playersWithoutCards[0] : null;\r\n  // La partie se termine quand il ne reste qu'un seul joueur avec des cartes\r\n  const gameEnded = playersWithCards.length <= 1 && roomData?.gameStarted && playersWithoutCards.length > 0;\r\n\r\n  const selectTheme = async (theme) => {\r\n    setLoading(true);\r\n    try {\r\n      await updateDoc(doc(db, 'rooms', roomCode), {\r\n        currentTheme: theme,\r\n        gamePhase: 'playing',\r\n        themeSelectionPhase: false,\r\n        currentTurnStartTime: Date.now()\r\n      });\r\n    } catch (err) {\r\n      console.error('Erreur lors de la sélection du thème:', err);\r\n    }\r\n    setLoading(false);\r\n  };\r\n\r\n  const playCard = async () => {\r\n    if (!selectedCard || loading) return;\r\n\r\n    setLoading(true);\r\n    try {\r\n      if (!roomData?.players || !Array.isArray(roomData.players) || !myPlayer?.cards) {\r\n        setLoading(false);\r\n        return;\r\n      }\r\n\r\n      const myPlayerIndex = roomData.players.findIndex(p => p.id === playerId);\r\n      const myCards = [...myPlayer.cards];\r\n      const cardIndex = myCards.findIndex(c => c.id === selectedCard.id);\r\n      \r\n      if (cardIndex === -1) return;\r\n\r\n      let updates = {};\r\n      let nextPhase = 'voting';\r\n\r\n      // Retirer la carte jouée\r\n      myCards.splice(cardIndex, 1);\r\n      updates[`players.${myPlayerIndex}.cards`] = myCards;\r\n\r\n      // Traiter selon le type de carte\r\n      if (selectedCard.type === 'letter' || selectedCard.type === 'joker') {\r\n        if (!userWord.trim()) {\r\n          setLoading(false);\r\n          return;\r\n        }\r\n\r\n        updates.currentPlay = {\r\n          playerId: playerId,\r\n          playerName: playerName,\r\n          card: selectedCard,\r\n          word: userWord.trim(),\r\n          jokerLetter: selectedCard.type === 'joker' ? jokerLetter : null,\r\n          timestamp: Date.now()\r\n        };\r\n        updates.gamePhase = 'voting';\r\n        updates.votingStartTime = Date.now();\r\n        updates.votes = {};\r\n\r\n      } else if (selectedCard.type === 'reverse') {\r\n        updates.direction = roomData.direction * -1;\r\n        nextPhase = 'playing';\r\n        \r\n      } else if (selectedCard.type === 'stop') {\r\n        // Passer le prochain joueur\r\n        const nextIndex = getNextPlayerIndex(roomData.currentPlayerIndex, roomData.direction, roomData.players.length, roomData.players);\r\n        const skipIndex = getNextPlayerIndex(nextIndex, roomData.direction, roomData.players.length, roomData.players);\r\n        updates.currentPlayerIndex = skipIndex;\r\n        updates.currentTurnStartTime = Date.now();\r\n        nextPhase = 'playing';\r\n        \r\n      } else if (selectedCard.type === 'swap') {\r\n        if (!swapTarget) {\r\n          setLoading(false);\r\n          return;\r\n        }\r\n        \r\n        const targetPlayerIndex = roomData.players.findIndex(p => p.id === swapTarget);\r\n        if (targetPlayerIndex === -1) {\r\n          setLoading(false);\r\n          return;\r\n        }\r\n\r\n        const targetCards = [...roomData.players[targetPlayerIndex].cards];\r\n        \r\n        if (swapMode === 'single') {\r\n          // Échanger 1 carte aléatoire\r\n          if (myCards.length > 0 && targetCards.length > 0) {\r\n            const myRandomIndex = Math.floor(Math.random() * myCards.length);\r\n            const targetRandomIndex = Math.floor(Math.random() * targetCards.length);\r\n            \r\n            const tempCard = myCards[myRandomIndex];\r\n            myCards[myRandomIndex] = targetCards[targetRandomIndex];\r\n            targetCards[targetRandomIndex] = tempCard;\r\n          }\r\n        } else {\r\n          // Échanger tous les paquets\r\n          updates[`players.${myPlayerIndex}.cards`] = targetCards;\r\n          updates[`players.${targetPlayerIndex}.cards`] = myCards;\r\n        }\r\n        \r\n        if (swapMode === 'single') {\r\n          updates[`players.${myPlayerIndex}.cards`] = myCards;\r\n          updates[`players.${targetPlayerIndex}.cards`] = targetCards;\r\n        }\r\n        \r\n        nextPhase = 'playing';\r\n        \r\n      } else if (selectedCard.type === 'crakitoko') {\r\n        updates.themeChoices = selectedCard.themes;\r\n        updates.gamePhase = 'theme-selection';\r\n        updates.themeSelectionPhase = true;\r\n      }\r\n\r\n      // Passer au joueur suivant si ce n'est pas un vote\r\n      if (nextPhase === 'playing') {\r\n        const nextPlayerIndex = getNextPlayerIndex(roomData.currentPlayerIndex, roomData.direction, roomData.players.length, roomData.players);\r\n        updates.currentPlayerIndex = nextPlayerIndex;\r\n        updates.currentTurnStartTime = Date.now();\r\n      }\r\n\r\n      updates.gamePhase = nextPhase;\r\n      await updateDoc(doc(db, 'rooms', roomCode), updates);\r\n\r\n      // Reset des états locaux\r\n      setSelectedCard(null);\r\n      setUserWord('');\r\n      setJokerLetter('');\r\n      setSwapTarget('');\r\n      setSwapMode('single');\r\n\r\n    } catch (err) {\r\n      console.error('Erreur lors du jeu de la carte:', err);\r\n    }\r\n    setLoading(false);\r\n  };\r\n\r\n  const submitVote = async (voteValue) => {\r\n    if (loading || !roomData.currentPlay) return;\r\n\r\n    setLoading(true);\r\n    try {\r\n      const votes = { ...roomData.votes };\r\n      votes[playerId] = voteValue;\r\n\r\n      await updateDoc(doc(db, 'rooms', roomCode), {\r\n        votes: votes\r\n      });\r\n\r\n      setVote(voteValue);\r\n    } catch (err) {\r\n      console.error('Erreur lors du vote:', err);\r\n    }\r\n    setLoading(false);\r\n  };\r\n\r\n  const processVoteResults = async () => {\r\n    if (!roomData.currentPlay || !roomData.votes) return;\r\n\r\n    const votes = Object.values(roomData.votes);\r\n    const approvals = votes.filter(v => v === true).length;\r\n    const rejections = votes.filter(v => v === false).length;\r\n    const isApproved = approvals >= rejections;\r\n\r\n    const playedPlayerIndex = roomData.players.findIndex(p => p.id === roomData.currentPlay.playerId);\r\n    let updates = {};\r\n\r\n    if (!isApproved) {\r\n      // Réponse refusée - remettre la carte + 1 de la pioche\r\n      const playerCards = [...roomData.players[playedPlayerIndex].cards];\r\n      playerCards.push(roomData.currentPlay.card);\r\n      \r\n      // Ajouter une carte de la pioche\r\n      if (roomData.deck && roomData.deck.length > 0) {\r\n        const newCard = roomData.deck[0];\r\n        const remainingDeck = roomData.deck.slice(1);\r\n        playerCards.push(newCard);\r\n        updates.deck = remainingDeck;\r\n      }\r\n      \r\n      updates[`players.${playedPlayerIndex}.cards`] = playerCards;\r\n    } else {\r\n      // Réponse acceptée - appliquer les malus si nécessaire\r\n      const currentPlay = roomData.currentPlay;\r\n      let penalty = 0;\r\n      \r\n      if (currentPlay.card.type === 'letter') {\r\n        penalty = LETTER_PENALTIES[currentPlay.card.letter] || 0;\r\n      } else if (currentPlay.card.type === 'joker' && currentPlay.jokerLetter) {\r\n        penalty = LETTER_PENALTIES[currentPlay.jokerLetter] || 0;\r\n      }\r\n      \r\n      // Appliquer le malus au joueur suivant\r\n      if (penalty > 0) {\r\n        const nextPlayerIndex = getNextPlayerIndex(roomData.currentPlayerIndex, roomData.direction, roomData.players.length, roomData.players);\r\n        const nextPlayerCards = [...roomData.players[nextPlayerIndex].cards];\r\n        \r\n        for (let i = 0; i < penalty && roomData.deck && roomData.deck.length > 0; i++) {\r\n          nextPlayerCards.push(roomData.deck[i]);\r\n        }\r\n        \r\n        updates[`players.${nextPlayerIndex}.cards`] = nextPlayerCards;\r\n        updates.deck = roomData.deck.slice(penalty);\r\n      }\r\n    }\r\n\r\n    // Passer au joueur suivant\r\n    const nextPlayerIndex = getNextPlayerIndex(roomData.currentPlayerIndex, roomData.direction, roomData.players.length, roomData.players);\r\n    \r\n    updates.currentPlayerIndex = nextPlayerIndex;\r\n    updates.gamePhase = 'playing';\r\n    updates.currentPlay = null;\r\n    updates.votes = {};\r\n    updates.votingStartTime = null;\r\n    updates.currentTurnStartTime = Date.now();\r\n\r\n    await updateDoc(doc(db, 'rooms', roomCode), updates);\r\n  };\r\n\r\n  const handleTimeout = async (phase) => {\r\n    if (phase === 'playing' && isMyTurn) {\r\n      // Timeout pendant le tour du joueur - ajouter une carte\r\n      const myPlayerIndex = roomData.players.findIndex(p => p.id === playerId);\r\n      const myCards = [...myPlayer.cards];\r\n      \r\n      if (roomData.deck && roomData.deck.length > 0) {\r\n        myCards.push(roomData.deck[0]);\r\n        const remainingDeck = roomData.deck.slice(1);\r\n        \r\n        const nextPlayerIndex = getNextPlayerIndex(roomData.currentPlayerIndex, roomData.direction, roomData.players.length, roomData.players);\r\n        \r\n        await updateDoc(doc(db, 'rooms', roomCode), {\r\n          [`players.${myPlayerIndex}.cards`]: myCards,\r\n          deck: remainingDeck,\r\n          currentPlayerIndex: nextPlayerIndex,\r\n          currentTurnStartTime: Date.now()\r\n        });\r\n      }\r\n    } else if (phase === 'voting') {\r\n      // Timeout du vote - traiter les résultats\r\n      await processVoteResults();\r\n    }\r\n  };\r\n\r\n  if ((firstWinner || gameEnded) && roomData?.gamePhase !== 'theme-selection') {\r\n    return <WinnerPanel winner={firstWinner} playersWithoutCards={playersWithoutCards} onLeaveRoom={onLeaveRoom} />;\r\n  }\r\n\r\n  if (!roomData || !myPlayer) {\r\n    console.log('🎮 Game - Données manquantes, affichage loading');\r\n    return <div className=\"loading\">Chargement de la partie...</div>;\r\n  }\r\n\r\n  return (\r\n    <div className=\"game\">\r\n      <div className=\"game-header\">\r\n        <div className=\"room-info\">\r\n          <span className=\"room-code\">Salle: {roomCode}</span>\r\n          <button onClick={onLeaveRoom} className=\"btn btn-danger leave-btn\">\r\n            Quitter\r\n          </button>\r\n        </div>\r\n        \r\n        <CurrentTheme theme={roomData.currentTheme} />\r\n        \r\n        <div className=\"players-status\">\r\n          {normalizedPlayers.length > 0 ? normalizedPlayers.map((player, index) => (\r\n            <div \r\n              key={player.id} \r\n              className={`player-status ${index === roomData.currentPlayerIndex ? 'current-player' : ''}`}\r\n            >\r\n              <span className=\"player-name\">{player.name}</span>\r\n              <span className=\"cards-count\">{player.cards?.length || 0}</span>\r\n            </div>\r\n          )) : null}\r\n        </div>\r\n      </div>\r\n\r\n      {/* Phase de sélection de thème */}\r\n      {gamePhase === 'theme-selection' && isMyTurn && (\r\n        <div className=\"theme-selection\">\r\n          <h2>🎯 Choisissez un thème</h2>\r\n          <div className=\"theme-choices\">\r\n            {roomData.themeChoices?.map((theme, index) => (\r\n              <button\r\n                key={index}\r\n                onClick={() => selectTheme(theme)}\r\n                className=\"btn btn-theme\"\r\n                disabled={loading}\r\n              >\r\n                {theme}\r\n              </button>\r\n            ))}\r\n          </div>\r\n        </div>\r\n      )}\r\n\r\n      {gamePhase === 'theme-selection' && !isMyTurn && (\r\n        <div className=\"waiting-theme\">\r\n          <p>⏳ {currentPlayer?.name} choisit le thème...</p>\r\n        </div>\r\n      )}\r\n\r\n      {/* Phase de jeu */}\r\n      {gamePhase === 'playing' && (\r\n        <div className=\"playing-phase\">\r\n          <Timer\r\n            duration={15}\r\n            onTimeout={() => handleTimeout('playing')}\r\n            startTime={roomData.currentTurnStartTime}\r\n            active={isMyTurn}\r\n          />\r\n\r\n          {isMyTurn && myPlayer?.cards && myPlayer.cards.length > 0 ? (\r\n            <div className=\"my-turn\">\r\n              <h2>🎮 À votre tour !</h2>\r\n              \r\n              <div className=\"my-cards\">\r\n                <h3>Vos cartes:</h3>\r\n                <div className=\"cards-grid\">\r\n                  {myPlayer?.cards && Array.isArray(myPlayer.cards) ? myPlayer.cards.map((card) => (\r\n                    <div\r\n                      key={card.id}\r\n                      className={`card ${selectedCard?.id === card.id ? 'selected' : ''}`}\r\n                      onClick={() => setSelectedCard(card)}\r\n                    >\r\n                      {card.type === 'letter' && (\r\n                        <div className=\"letter-card\">\r\n                          <span className=\"letter\">{card.letter}</span>\r\n                          <span className=\"penalty\">+{LETTER_PENALTIES[card.letter]}</span>\r\n                        </div>\r\n                      )}\r\n                      {card.type === 'joker' && (\r\n                        <div className=\"joker-card\">🃏 JOKER</div>\r\n                      )}\r\n                      {card.type === 'reverse' && (\r\n                        <div className=\"special-card\">🔄 SENS</div>\r\n                      )}\r\n                      {card.type === 'swap' && (\r\n                        <div className=\"special-card\">🔄 ÉCHANGE</div>\r\n                      )}\r\n                      {card.type === 'stop' && (\r\n                        <div className=\"special-card\">⏸️ STOP</div>\r\n                      )}\r\n                      {card.type === 'crakitoko' && (\r\n                        <div className=\"crakitoko-card\">🎯 THÈME</div>\r\n                      )}\r\n                    </div>\r\n                  )) : (\r\n                    <div>Aucune carte disponible</div>\r\n                  )}\r\n                </div>\r\n              </div>\r\n\r\n              {selectedCard && (\r\n                <div className=\"card-action\">\r\n                  {(selectedCard.type === 'letter' || selectedCard.type === 'joker') && (\r\n                    <div className=\"word-input\">\r\n                      <input\r\n                        type=\"text\"\r\n                        placeholder=\"Votre mot...\"\r\n                        value={userWord}\r\n                        onChange={(e) => setUserWord(e.target.value)}\r\n                        className=\"input-field\"\r\n                      />\r\n                      \r\n                      {selectedCard.type === 'joker' && (\r\n                        <select\r\n                          value={jokerLetter}\r\n                          onChange={(e) => setJokerLetter(e.target.value)}\r\n                          className=\"select-field\"\r\n                        >\r\n                          <option value=\"\">Choisir une lettre</option>\r\n                          {Object.keys(LETTER_PENALTIES).map(letter => (\r\n                            <option key={letter} value={letter}>\r\n                              {letter} (+{LETTER_PENALTIES[letter]})\r\n                            </option>\r\n                          ))}\r\n                        </select>\r\n                      )}\r\n                    </div>\r\n                  )}\r\n\r\n                  {selectedCard.type === 'swap' && (\r\n                    <div className=\"swap-controls\">\r\n                      <select\r\n                        value={swapTarget}\r\n                        onChange={(e) => setSwapTarget(e.target.value)}\r\n                        className=\"select-field\"\r\n                      >\r\n                        <option value=\"\">Choisir un joueur</option>\r\n                        {roomData.players && Array.isArray(roomData.players) \r\n                          ? roomData.players\r\n                            .filter(p => p.id !== playerId)\r\n                            .map(player => (\r\n                              <option key={player.id} value={player.id}>\r\n                                {player.name} ({player.cards?.length || 0} cartes)\r\n                              </option>\r\n                            ))\r\n                          : null\r\n                        }\r\n                      </select>\r\n                      \r\n                      <div className=\"swap-mode\">\r\n                        <label>\r\n                          <input\r\n                            type=\"radio\"\r\n                            name=\"swapMode\"\r\n                            value=\"single\"\r\n                            checked={swapMode === 'single'}\r\n                            onChange={(e) => setSwapMode(e.target.value)}\r\n                          />\r\n                          1 carte\r\n                        </label>\r\n                        <label>\r\n                          <input\r\n                            type=\"radio\"\r\n                            name=\"swapMode\"\r\n                            value=\"all\"\r\n                            checked={swapMode === 'all'}\r\n                            onChange={(e) => setSwapMode(e.target.value)}\r\n                          />\r\n                          Tout le paquet\r\n                        </label>\r\n                      </div>\r\n                    </div>\r\n                  )}\r\n\r\n                  <button\r\n                    onClick={playCard}\r\n                    disabled={loading || \r\n                      ((selectedCard.type === 'letter' || selectedCard.type === 'joker') && !userWord.trim()) ||\r\n                      (selectedCard.type === 'joker' && !jokerLetter) ||\r\n                      (selectedCard.type === 'swap' && !swapTarget)\r\n                    }\r\n                    className=\"btn btn-primary play-btn\"\r\n                  >\r\n                    {loading ? 'Jouer...' : 'Jouer la carte'}\r\n                  </button>\r\n                </div>\r\n              )}\r\n            </div>\r\n          ) : isMyTurn && myPlayer?.cards && myPlayer.cards.length === 0 ? (\r\n            <div className=\"finished-player\">\r\n              <h2>🎉 Vous avez terminé !</h2>\r\n              <p>Vous n'avez plus de cartes. Regardez les autres joueurs finir la partie.</p>\r\n            </div>\r\n          ) : (\r\n            <div className=\"waiting-turn\">\r\n              <p>⏳ C'est au tour de <strong>{currentPlayer?.name}</strong></p>\r\n              {myPlayer?.cards && myPlayer.cards.length === 0 && (\r\n                <p className=\"finished-status\">🎉 Vous avez terminé la partie !</p>\r\n              )}\r\n            </div>\r\n          )}\r\n        </div>\r\n      )}\r\n\r\n      {/* Phase de vote */}\r\n      {gamePhase === 'voting' && roomData.currentPlay && (\r\n        <div className=\"voting-phase\">\r\n          <Timer\r\n            duration={5}\r\n            onTimeout={() => handleTimeout('voting')}\r\n            startTime={roomData.votingStartTime}\r\n            active={true}\r\n          />\r\n\r\n          <div className=\"current-play\">\r\n            <h2>🗳️ Vote en cours</h2>\r\n            <div className=\"play-info\">\r\n              <p><strong>{roomData.currentPlay.playerName}</strong> a joué:</p>\r\n              <div className=\"played-card\">\r\n                {roomData.currentPlay.card.type === 'letter' && (\r\n                  <span className=\"letter\">{roomData.currentPlay.card.letter}</span>\r\n                )}\r\n                {roomData.currentPlay.card.type === 'joker' && (\r\n                  <span className=\"joker\">🃏 → {roomData.currentPlay.jokerLetter}</span>\r\n                )}\r\n              </div>\r\n              <p className=\"word-played\">Mot: <strong>{roomData.currentPlay.word}</strong></p>\r\n            </div>\r\n          </div>\r\n\r\n          {roomData.currentPlay.playerId !== playerId && myPlayer?.cards && myPlayer.cards.length > 0 ? (\r\n            <div className=\"vote-buttons\">\r\n              <button\r\n                onClick={() => submitVote(true)}\r\n                disabled={loading || vote !== null}\r\n                className=\"btn btn-success vote-btn\"\r\n              >\r\n                ✅ Valide\r\n              </button>\r\n              <button\r\n                onClick={() => submitVote(false)}\r\n                disabled={loading || vote !== null}\r\n                className=\"btn btn-danger vote-btn\"\r\n              >\r\n                ❌ Invalide\r\n              </button>\r\n              {vote !== null && (\r\n                <p className=\"vote-submitted\">\r\n                  Votre vote: {vote ? '✅ Valide' : '❌ Invalide'}\r\n                </p>\r\n              )}\r\n            </div>\r\n          ) : myPlayer?.cards && myPlayer.cards.length === 0 ? (\r\n            <div className=\"cannot-vote\">\r\n              <p>🎉 Vous avez terminé ! Vous ne pouvez plus voter.</p>\r\n            </div>\r\n          ) : (\r\n            <div className=\"cannot-vote\">\r\n              <p>⏳ Vous ne pouvez pas voter sur votre propre réponse.</p>\r\n            </div>\r\n          )}\r\n\r\n          <div className=\"vote-progress\">\r\n            <p>Votes reçus: {Object.keys(roomData.votes || {}).length}/{Math.max(1, (roomData.players?.filter(p => p.cards && p.cards.length > 0).length || 1) - 1)}</p>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction getNextPlayerIndex(currentIndex, direction, totalPlayers, players) {\r\n  let nextIndex = currentIndex;\r\n  let attempts = 0;\r\n  \r\n  do {\r\n    if (direction === 1) {\r\n      nextIndex = (nextIndex + 1) % totalPlayers;\r\n    } else {\r\n      nextIndex = nextIndex === 0 ? totalPlayers - 1 : nextIndex - 1;\r\n    }\r\n    attempts++;\r\n  } while (attempts < totalPlayers && (!players[nextIndex] || !players[nextIndex].cards || players[nextIndex].cards.length === 0));\r\n  \r\n  return nextIndex;\r\n}\r\n\r\nexport default Game;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}