{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\lamtm\\\\Downloads\\\\cracklist-web\\\\src\\\\components\\\\Game.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { doc, updateDoc } from 'firebase/firestore';\nimport { db } from '../firebase';\nimport CurrentTheme from './CurrentTheme';\nimport Timer from './Timer';\nimport WinnerPanel from './WinnerPanel';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst LETTER_PENALTIES = {\n  'A': 0,\n  'B': 0,\n  'C': 0,\n  'D': 0,\n  'F': 0,\n  'G': 0,\n  'L': 0,\n  'M': 0,\n  'N': 0,\n  'P': 0,\n  'R': 0,\n  'S': 0,\n  'T': 0,\n  'V': 0,\n  'E': 1,\n  'I': 1,\n  'J': 1,\n  'O': 1,\n  'H': 2,\n  'K': 2,\n  'U': 2,\n  'Y': 2,\n  'Q': 3,\n  'W': 3,\n  'X': 3,\n  'Z': 3\n};\nfunction Game({\n  roomCode,\n  playerName,\n  playerId,\n  roomData,\n  onLeaveRoom\n}) {\n  _s();\n  var _roomData$themeChoice, _roomData$players;\n  const [selectedCard, setSelectedCard] = useState(null);\n  const [userWord, setUserWord] = useState('');\n  const [jokerLetter, setJokerLetter] = useState('');\n  const [swapTarget, setSwapTarget] = useState('');\n  const [swapMode, setSwapMode] = useState('single'); // 'single' ou 'all'\n  const [vote, setVote] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const currentPlayer = roomData !== null && roomData !== void 0 && roomData.players && Array.isArray(roomData.players) ? roomData.players[roomData.currentPlayerIndex] : null;\n  const isMyTurn = (currentPlayer === null || currentPlayer === void 0 ? void 0 : currentPlayer.id) === playerId;\n  const myPlayer = roomData !== null && roomData !== void 0 && roomData.players && Array.isArray(roomData.players) ? roomData.players.find(p => p.id === playerId) : null;\n  const gamePhase = (roomData === null || roomData === void 0 ? void 0 : roomData.gamePhase) || 'theme-selection';\n  useEffect(() => {\n    // Gérer les déconnexions\n    const handleDisconnection = async () => {\n      if (roomData && myPlayer && roomData.players && Array.isArray(roomData.players)) {\n        const playerIndex = roomData.players.findIndex(p => p.id === playerId);\n        if (playerIndex !== -1) {\n          await updateDoc(doc(db, 'rooms', roomCode), {\n            [`players.${playerIndex}.lastSeen`]: Date.now(),\n            [`players.${playerIndex}.connected`]: true\n          });\n        }\n      }\n    };\n    handleDisconnection();\n    const interval = setInterval(handleDisconnection, 5000);\n    return () => clearInterval(interval);\n  }, [roomCode, playerId, roomData, myPlayer]);\n\n  // Vérifier s'il y a un gagnant (premier joueur sans cartes)\n  const playersWithCards = roomData !== null && roomData !== void 0 && roomData.players && Array.isArray(roomData.players) ? roomData.players.filter(p => p.cards && p.cards.length > 0) : [];\n  const playersWithoutCards = roomData !== null && roomData !== void 0 && roomData.players && Array.isArray(roomData.players) ? roomData.players.filter(p => !p.cards || p.cards.length === 0) : [];\n\n  // Le gagnant est le premier joueur qui n'a plus de cartes\n  const winner = playersWithoutCards.length > 0 ? playersWithoutCards[0] : null;\n  // Ou si il ne reste qu'un joueur avec des cartes, les autres ont gagné\n  const gameEnded = playersWithCards.length <= 1;\n  const selectTheme = async theme => {\n    setLoading(true);\n    try {\n      await updateDoc(doc(db, 'rooms', roomCode), {\n        currentTheme: theme,\n        gamePhase: 'playing',\n        themeSelectionPhase: false,\n        currentTurnStartTime: Date.now()\n      });\n    } catch (err) {\n      console.error('Erreur lors de la sélection du thème:', err);\n    }\n    setLoading(false);\n  };\n  const playCard = async () => {\n    if (!selectedCard || loading) return;\n    setLoading(true);\n    try {\n      if (!(roomData !== null && roomData !== void 0 && roomData.players) || !Array.isArray(roomData.players) || !(myPlayer !== null && myPlayer !== void 0 && myPlayer.cards)) {\n        setLoading(false);\n        return;\n      }\n      const myPlayerIndex = roomData.players.findIndex(p => p.id === playerId);\n      const myCards = [...myPlayer.cards];\n      const cardIndex = myCards.findIndex(c => c.id === selectedCard.id);\n      if (cardIndex === -1) return;\n      let updates = {};\n      let nextPhase = 'voting';\n\n      // Retirer la carte jouée\n      myCards.splice(cardIndex, 1);\n      updates[`players.${myPlayerIndex}.cards`] = myCards;\n\n      // Traiter selon le type de carte\n      if (selectedCard.type === 'letter' || selectedCard.type === 'joker') {\n        if (!userWord.trim()) {\n          setLoading(false);\n          return;\n        }\n        updates.currentPlay = {\n          playerId: playerId,\n          playerName: playerName,\n          card: selectedCard,\n          word: userWord.trim(),\n          jokerLetter: selectedCard.type === 'joker' ? jokerLetter : null,\n          timestamp: Date.now()\n        };\n        updates.gamePhase = 'voting';\n        updates.votingStartTime = Date.now();\n        updates.votes = {};\n      } else if (selectedCard.type === 'reverse') {\n        updates.direction = roomData.direction * -1;\n        nextPhase = 'playing';\n      } else if (selectedCard.type === 'stop') {\n        // Passer le prochain joueur\n        const nextIndex = getNextPlayerIndex(roomData.currentPlayerIndex, roomData.direction, roomData.players.length);\n        const skipIndex = getNextPlayerIndex(nextIndex, roomData.direction, roomData.players.length);\n        updates.currentPlayerIndex = skipIndex;\n        updates.currentTurnStartTime = Date.now();\n        nextPhase = 'playing';\n      } else if (selectedCard.type === 'swap') {\n        if (!swapTarget) {\n          setLoading(false);\n          return;\n        }\n        const targetPlayerIndex = roomData.players.findIndex(p => p.id === swapTarget);\n        if (targetPlayerIndex === -1) {\n          setLoading(false);\n          return;\n        }\n        const targetCards = [...roomData.players[targetPlayerIndex].cards];\n        if (swapMode === 'single') {\n          // Échanger 1 carte aléatoire\n          if (myCards.length > 0 && targetCards.length > 0) {\n            const myRandomIndex = Math.floor(Math.random() * myCards.length);\n            const targetRandomIndex = Math.floor(Math.random() * targetCards.length);\n            const tempCard = myCards[myRandomIndex];\n            myCards[myRandomIndex] = targetCards[targetRandomIndex];\n            targetCards[targetRandomIndex] = tempCard;\n          }\n        } else {\n          // Échanger tous les paquets\n          updates[`players.${myPlayerIndex}.cards`] = targetCards;\n          updates[`players.${targetPlayerIndex}.cards`] = myCards;\n        }\n        if (swapMode === 'single') {\n          updates[`players.${myPlayerIndex}.cards`] = myCards;\n          updates[`players.${targetPlayerIndex}.cards`] = targetCards;\n        }\n        nextPhase = 'playing';\n      } else if (selectedCard.type === 'crakitoko') {\n        updates.themeChoices = selectedCard.themes;\n        updates.gamePhase = 'theme-selection';\n        updates.themeSelectionPhase = true;\n      }\n\n      // Passer au joueur suivant si ce n'est pas un vote\n      if (nextPhase === 'playing') {\n        const nextPlayerIndex = getNextPlayerIndex(roomData.currentPlayerIndex, roomData.direction, roomData.players.length);\n        updates.currentPlayerIndex = nextPlayerIndex;\n        updates.currentTurnStartTime = Date.now();\n      }\n      updates.gamePhase = nextPhase;\n      await updateDoc(doc(db, 'rooms', roomCode), updates);\n\n      // Reset des états locaux\n      setSelectedCard(null);\n      setUserWord('');\n      setJokerLetter('');\n      setSwapTarget('');\n      setSwapMode('single');\n    } catch (err) {\n      console.error('Erreur lors du jeu de la carte:', err);\n    }\n    setLoading(false);\n  };\n  const submitVote = async voteValue => {\n    if (loading || !roomData.currentPlay) return;\n    setLoading(true);\n    try {\n      const votes = {\n        ...roomData.votes\n      };\n      votes[playerId] = voteValue;\n      await updateDoc(doc(db, 'rooms', roomCode), {\n        votes: votes\n      });\n      setVote(voteValue);\n    } catch (err) {\n      console.error('Erreur lors du vote:', err);\n    }\n    setLoading(false);\n  };\n  const processVoteResults = async () => {\n    if (!roomData.currentPlay || !roomData.votes) return;\n    const votes = Object.values(roomData.votes);\n    const approvals = votes.filter(v => v === true).length;\n    const rejections = votes.filter(v => v === false).length;\n    const isApproved = approvals >= rejections;\n    const playedPlayerIndex = roomData.players.findIndex(p => p.id === roomData.currentPlay.playerId);\n    let updates = {};\n    if (!isApproved) {\n      // Réponse refusée - remettre la carte + 1 de la pioche\n      const playerCards = [...roomData.players[playedPlayerIndex].cards];\n      playerCards.push(roomData.currentPlay.card);\n\n      // Ajouter une carte de la pioche\n      if (roomData.deck && roomData.deck.length > 0) {\n        const newCard = roomData.deck[0];\n        const remainingDeck = roomData.deck.slice(1);\n        playerCards.push(newCard);\n        updates.deck = remainingDeck;\n      }\n      updates[`players.${playedPlayerIndex}.cards`] = playerCards;\n    } else {\n      // Réponse acceptée - appliquer les malus si nécessaire\n      const currentPlay = roomData.currentPlay;\n      let penalty = 0;\n      if (currentPlay.card.type === 'letter') {\n        penalty = LETTER_PENALTIES[currentPlay.card.letter] || 0;\n      } else if (currentPlay.card.type === 'joker' && currentPlay.jokerLetter) {\n        penalty = LETTER_PENALTIES[currentPlay.jokerLetter] || 0;\n      }\n\n      // Appliquer le malus au joueur suivant\n      if (penalty > 0) {\n        const nextPlayerIndex = getNextPlayerIndex(roomData.currentPlayerIndex, roomData.direction, roomData.players.length);\n        const nextPlayerCards = [...roomData.players[nextPlayerIndex].cards];\n        for (let i = 0; i < penalty && roomData.deck && roomData.deck.length > 0; i++) {\n          nextPlayerCards.push(roomData.deck[i]);\n        }\n        updates[`players.${nextPlayerIndex}.cards`] = nextPlayerCards;\n        updates.deck = roomData.deck.slice(penalty);\n      }\n    }\n\n    // Passer au joueur suivant\n    const nextPlayerIndex = getNextPlayerIndex(roomData.currentPlayerIndex, roomData.direction, roomData.players.length);\n    updates.currentPlayerIndex = nextPlayerIndex;\n    updates.gamePhase = 'playing';\n    updates.currentPlay = null;\n    updates.votes = {};\n    updates.votingStartTime = null;\n    updates.currentTurnStartTime = Date.now();\n    await updateDoc(doc(db, 'rooms', roomCode), updates);\n  };\n  const handleTimeout = async phase => {\n    if (phase === 'playing' && isMyTurn) {\n      // Timeout pendant le tour du joueur - ajouter une carte\n      const myPlayerIndex = roomData.players.findIndex(p => p.id === playerId);\n      const myCards = [...myPlayer.cards];\n      if (roomData.deck && roomData.deck.length > 0) {\n        myCards.push(roomData.deck[0]);\n        const remainingDeck = roomData.deck.slice(1);\n        const nextPlayerIndex = getNextPlayerIndex(roomData.currentPlayerIndex, roomData.direction, roomData.players.length);\n        await updateDoc(doc(db, 'rooms', roomCode), {\n          [`players.${myPlayerIndex}.cards`]: myCards,\n          deck: remainingDeck,\n          currentPlayerIndex: nextPlayerIndex,\n          currentTurnStartTime: Date.now()\n        });\n      }\n    } else if (phase === 'voting') {\n      // Timeout du vote - traiter les résultats\n      await processVoteResults();\n    }\n  };\n  if (winner || gameEnded) {\n    return /*#__PURE__*/_jsxDEV(WinnerPanel, {\n      winner: winner,\n      playersWithoutCards: playersWithoutCards,\n      onLeaveRoom: onLeaveRoom\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 309,\n      columnNumber: 12\n    }, this);\n  }\n  if (!roomData || !myPlayer) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"loading\",\n      children: \"Chargement...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 313,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"game\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"room-info\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"room-code\",\n          children: [\"Salle: \", roomCode]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 320,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: onLeaveRoom,\n          className: \"btn btn-danger leave-btn\",\n          children: \"Quitter\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 321,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 319,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(CurrentTheme, {\n        theme: roomData.currentTheme\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 326,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"players-status\",\n        children: roomData.players && Array.isArray(roomData.players) ? roomData.players.map((player, index) => {\n          var _player$cards;\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `player-status ${index === roomData.currentPlayerIndex ? 'current-player' : ''}`,\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"player-name\",\n              children: player.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 334,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"cards-count\",\n              children: ((_player$cards = player.cards) === null || _player$cards === void 0 ? void 0 : _player$cards.length) || 0\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 335,\n              columnNumber: 15\n            }, this)]\n          }, player.id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 330,\n            columnNumber: 13\n          }, this);\n        }) : null\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 328,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 318,\n      columnNumber: 7\n    }, this), gamePhase === 'theme-selection' && isMyTurn && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"theme-selection\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"\\uD83C\\uDFAF Choisissez un th\\xE8me\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 344,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"theme-choices\",\n        children: (_roomData$themeChoice = roomData.themeChoices) === null || _roomData$themeChoice === void 0 ? void 0 : _roomData$themeChoice.map((theme, index) => /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => selectTheme(theme),\n          className: \"btn btn-theme\",\n          disabled: loading,\n          children: theme\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 347,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 345,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 343,\n      columnNumber: 9\n    }, this), gamePhase === 'theme-selection' && !isMyTurn && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"waiting-theme\",\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"\\u23F3 \", currentPlayer === null || currentPlayer === void 0 ? void 0 : currentPlayer.name, \" choisit le th\\xE8me...\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 362,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 361,\n      columnNumber: 9\n    }, this), gamePhase === 'playing' && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"playing-phase\",\n      children: [/*#__PURE__*/_jsxDEV(Timer, {\n        duration: 15,\n        onTimeout: () => handleTimeout('playing'),\n        startTime: roomData.currentTurnStartTime,\n        active: isMyTurn\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 369,\n        columnNumber: 11\n      }, this), isMyTurn && myPlayer !== null && myPlayer !== void 0 && myPlayer.cards && myPlayer.cards.length > 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"my-turn\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"\\uD83C\\uDFAE \\xC0 votre tour !\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 378,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"my-cards\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"Vos cartes:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 381,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"cards-grid\",\n            children: myPlayer !== null && myPlayer !== void 0 && myPlayer.cards && Array.isArray(myPlayer.cards) ? myPlayer.cards.map(card => /*#__PURE__*/_jsxDEV(\"div\", {\n              className: `card ${(selectedCard === null || selectedCard === void 0 ? void 0 : selectedCard.id) === card.id ? 'selected' : ''}`,\n              onClick: () => setSelectedCard(card),\n              children: [card.type === 'letter' && /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"letter-card\",\n                children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"letter\",\n                  children: card.letter\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 391,\n                  columnNumber: 27\n                }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"penalty\",\n                  children: [\"+\", LETTER_PENALTIES[card.letter]]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 392,\n                  columnNumber: 27\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 390,\n                columnNumber: 25\n              }, this), card.type === 'joker' && /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"joker-card\",\n                children: \"\\uD83C\\uDCCF JOKER\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 396,\n                columnNumber: 25\n              }, this), card.type === 'reverse' && /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"special-card\",\n                children: \"\\uD83D\\uDD04 SENS\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 399,\n                columnNumber: 25\n              }, this), card.type === 'swap' && /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"special-card\",\n                children: \"\\uD83D\\uDD04 \\xC9CHANGE\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 402,\n                columnNumber: 25\n              }, this), card.type === 'stop' && /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"special-card\",\n                children: \"\\u23F8\\uFE0F STOP\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 405,\n                columnNumber: 25\n              }, this), card.type === 'crakitoko' && /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"crakitoko-card\",\n                children: \"\\uD83C\\uDFAF TH\\xC8ME\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 408,\n                columnNumber: 25\n              }, this)]\n            }, card.id, true, {\n              fileName: _jsxFileName,\n              lineNumber: 384,\n              columnNumber: 21\n            }, this)) : /*#__PURE__*/_jsxDEV(\"div\", {\n              children: \"Aucune carte disponible\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 412,\n              columnNumber: 21\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 382,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 380,\n          columnNumber: 15\n        }, this), selectedCard && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"card-action\",\n          children: [(selectedCard.type === 'letter' || selectedCard.type === 'joker') && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"word-input\",\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              placeholder: \"Votre mot...\",\n              value: userWord,\n              onChange: e => setUserWord(e.target.value),\n              className: \"input-field\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 421,\n              columnNumber: 23\n            }, this), selectedCard.type === 'joker' && /*#__PURE__*/_jsxDEV(\"select\", {\n              value: jokerLetter,\n              onChange: e => setJokerLetter(e.target.value),\n              className: \"select-field\",\n              children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"\",\n                children: \"Choisir une lettre\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 435,\n                columnNumber: 27\n              }, this), Object.keys(LETTER_PENALTIES).map(letter => /*#__PURE__*/_jsxDEV(\"option\", {\n                value: letter,\n                children: [letter, \" (+\", LETTER_PENALTIES[letter], \")\"]\n              }, letter, true, {\n                fileName: _jsxFileName,\n                lineNumber: 437,\n                columnNumber: 29\n              }, this))]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 430,\n              columnNumber: 25\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 420,\n            columnNumber: 21\n          }, this), selectedCard.type === 'swap' && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"swap-controls\",\n            children: [/*#__PURE__*/_jsxDEV(\"select\", {\n              value: swapTarget,\n              onChange: e => setSwapTarget(e.target.value),\n              className: \"select-field\",\n              children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"\",\n                children: \"Choisir un joueur\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 453,\n                columnNumber: 25\n              }, this), roomData.players && Array.isArray(roomData.players) ? roomData.players.filter(p => p.id !== playerId).map(player => {\n                var _player$cards2;\n                return /*#__PURE__*/_jsxDEV(\"option\", {\n                  value: player.id,\n                  children: [player.name, \" (\", ((_player$cards2 = player.cards) === null || _player$cards2 === void 0 ? void 0 : _player$cards2.length) || 0, \" cartes)\"]\n                }, player.id, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 458,\n                  columnNumber: 31\n                }, this);\n              }) : null]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 448,\n              columnNumber: 23\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"swap-mode\",\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"radio\",\n                  name: \"swapMode\",\n                  value: \"single\",\n                  checked: swapMode === 'single',\n                  onChange: e => setSwapMode(e.target.value)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 468,\n                  columnNumber: 27\n                }, this), \"1 carte\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 467,\n                columnNumber: 25\n              }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n                children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"radio\",\n                  name: \"swapMode\",\n                  value: \"all\",\n                  checked: swapMode === 'all',\n                  onChange: e => setSwapMode(e.target.value)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 478,\n                  columnNumber: 27\n                }, this), \"Tout le paquet\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 477,\n                columnNumber: 25\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 466,\n              columnNumber: 23\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 447,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: playCard,\n            disabled: loading || (selectedCard.type === 'letter' || selectedCard.type === 'joker') && !userWord.trim() || selectedCard.type === 'joker' && !jokerLetter || selectedCard.type === 'swap' && !swapTarget,\n            className: \"btn btn-primary play-btn\",\n            children: loading ? 'Jouer...' : 'Jouer la carte'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 491,\n            columnNumber: 19\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 418,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 377,\n        columnNumber: 13\n      }, this) : isMyTurn && myPlayer !== null && myPlayer !== void 0 && myPlayer.cards && myPlayer.cards.length === 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"finished-player\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"\\uD83C\\uDF89 Vous avez termin\\xE9 !\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 507,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Vous n'avez plus de cartes. Regardez les autres joueurs finir la partie.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 508,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 506,\n        columnNumber: 13\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"waiting-turn\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"\\u23F3 C'est au tour de \", /*#__PURE__*/_jsxDEV(\"strong\", {\n            children: currentPlayer === null || currentPlayer === void 0 ? void 0 : currentPlayer.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 512,\n            columnNumber: 37\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 512,\n          columnNumber: 15\n        }, this), (myPlayer === null || myPlayer === void 0 ? void 0 : myPlayer.cards) && myPlayer.cards.length === 0 && /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"finished-status\",\n          children: \"\\uD83C\\uDF89 Vous avez termin\\xE9 la partie !\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 514,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 511,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 368,\n      columnNumber: 9\n    }, this), gamePhase === 'voting' && roomData.currentPlay && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"voting-phase\",\n      children: [/*#__PURE__*/_jsxDEV(Timer, {\n        duration: 5,\n        onTimeout: () => handleTimeout('voting'),\n        startTime: roomData.votingStartTime,\n        active: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 524,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"current-play\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"\\uD83D\\uDDF3\\uFE0F Vote en cours\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 532,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"play-info\",\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: roomData.currentPlay.playerName\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 534,\n              columnNumber: 18\n            }, this), \" a jou\\xE9:\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 534,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"played-card\",\n            children: [roomData.currentPlay.card.type === 'letter' && /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"letter\",\n              children: roomData.currentPlay.card.letter\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 537,\n              columnNumber: 19\n            }, this), roomData.currentPlay.card.type === 'joker' && /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"joker\",\n              children: [\"\\uD83C\\uDCCF \\u2192 \", roomData.currentPlay.jokerLetter]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 540,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 535,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"word-played\",\n            children: [\"Mot: \", /*#__PURE__*/_jsxDEV(\"strong\", {\n              children: roomData.currentPlay.word\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 543,\n              columnNumber: 47\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 543,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 533,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 531,\n        columnNumber: 11\n      }, this), roomData.currentPlay.playerId !== playerId && myPlayer !== null && myPlayer !== void 0 && myPlayer.cards && myPlayer.cards.length > 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"vote-buttons\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => submitVote(true),\n          disabled: loading || vote !== null,\n          className: \"btn btn-success vote-btn\",\n          children: \"\\u2705 Valide\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 549,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => submitVote(false),\n          disabled: loading || vote !== null,\n          className: \"btn btn-danger vote-btn\",\n          children: \"\\u274C Invalide\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 556,\n          columnNumber: 15\n        }, this), vote !== null && /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"vote-submitted\",\n          children: [\"Votre vote: \", vote ? '✅ Valide' : '❌ Invalide']\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 564,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 548,\n        columnNumber: 13\n      }, this) : myPlayer !== null && myPlayer !== void 0 && myPlayer.cards && myPlayer.cards.length === 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"cannot-vote\",\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"\\uD83C\\uDF89 Vous avez termin\\xE9 ! Vous ne pouvez plus voter.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 571,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 570,\n        columnNumber: 13\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"cannot-vote\",\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"\\u23F3 Vous ne pouvez pas voter sur votre propre r\\xE9ponse.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 575,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 574,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"vote-progress\",\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Votes re\\xE7us: \", Object.keys(roomData.votes || {}).length, \"/\", Math.max(1, (((_roomData$players = roomData.players) === null || _roomData$players === void 0 ? void 0 : _roomData$players.filter(p => p.cards && p.cards.length > 0).length) || 1) - 1)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 580,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 579,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 523,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 317,\n    columnNumber: 5\n  }, this);\n}\n_s(Game, \"E/L1VYr1hyaJxfQtweHRFdLuhAg=\");\n_c = Game;\nfunction getNextPlayerIndex(currentIndex, direction, totalPlayers) {\n  if (direction === 1) {\n    return (currentIndex + 1) % totalPlayers;\n  } else {\n    return currentIndex === 0 ? totalPlayers - 1 : currentIndex - 1;\n  }\n}\nexport default Game;\nvar _c;\n$RefreshReg$(_c, \"Game\");","map":{"version":3,"names":["React","useState","useEffect","doc","updateDoc","db","CurrentTheme","Timer","WinnerPanel","jsxDEV","_jsxDEV","LETTER_PENALTIES","Game","roomCode","playerName","playerId","roomData","onLeaveRoom","_s","_roomData$themeChoice","_roomData$players","selectedCard","setSelectedCard","userWord","setUserWord","jokerLetter","setJokerLetter","swapTarget","setSwapTarget","swapMode","setSwapMode","vote","setVote","loading","setLoading","currentPlayer","players","Array","isArray","currentPlayerIndex","isMyTurn","id","myPlayer","find","p","gamePhase","handleDisconnection","playerIndex","findIndex","Date","now","interval","setInterval","clearInterval","playersWithCards","filter","cards","length","playersWithoutCards","winner","gameEnded","selectTheme","theme","currentTheme","themeSelectionPhase","currentTurnStartTime","err","console","error","playCard","myPlayerIndex","myCards","cardIndex","c","updates","nextPhase","splice","type","trim","currentPlay","card","word","timestamp","votingStartTime","votes","direction","nextIndex","getNextPlayerIndex","skipIndex","targetPlayerIndex","targetCards","myRandomIndex","Math","floor","random","targetRandomIndex","tempCard","themeChoices","themes","nextPlayerIndex","submitVote","voteValue","processVoteResults","Object","values","approvals","v","rejections","isApproved","playedPlayerIndex","playerCards","push","deck","newCard","remainingDeck","slice","penalty","letter","nextPlayerCards","i","handleTimeout","phase","fileName","_jsxFileName","lineNumber","columnNumber","className","children","onClick","map","player","index","_player$cards","name","disabled","duration","onTimeout","startTime","active","placeholder","value","onChange","e","target","keys","_player$cards2","checked","max","_c","currentIndex","totalPlayers","$RefreshReg$"],"sources":["C:/Users/lamtm/Downloads/cracklist-web/src/components/Game.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { doc, updateDoc } from 'firebase/firestore';\r\nimport { db } from '../firebase';\r\nimport CurrentTheme from './CurrentTheme';\r\nimport Timer from './Timer';\r\nimport WinnerPanel from './WinnerPanel';\r\n\r\nconst LETTER_PENALTIES = {\r\n  'A': 0, 'B': 0, 'C': 0, 'D': 0, 'F': 0, 'G': 0, 'L': 0, 'M': 0, 'N': 0, 'P': 0, 'R': 0, 'S': 0, 'T': 0, 'V': 0,\r\n  'E': 1, 'I': 1, 'J': 1, 'O': 1,\r\n  'H': 2, 'K': 2, 'U': 2, 'Y': 2,\r\n  'Q': 3, 'W': 3, 'X': 3, 'Z': 3\r\n};\r\n\r\nfunction Game({ roomCode, playerName, playerId, roomData, onLeaveRoom }) {\r\n  const [selectedCard, setSelectedCard] = useState(null);\r\n  const [userWord, setUserWord] = useState('');\r\n  const [jokerLetter, setJokerLetter] = useState('');\r\n  const [swapTarget, setSwapTarget] = useState('');\r\n  const [swapMode, setSwapMode] = useState('single'); // 'single' ou 'all'\r\n  const [vote, setVote] = useState(null);\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  const currentPlayer = roomData?.players && Array.isArray(roomData.players) \r\n    ? roomData.players[roomData.currentPlayerIndex] \r\n    : null;\r\n  const isMyTurn = currentPlayer?.id === playerId;\r\n  const myPlayer = roomData?.players && Array.isArray(roomData.players) \r\n    ? roomData.players.find(p => p.id === playerId) \r\n    : null;\r\n  const gamePhase = roomData?.gamePhase || 'theme-selection';\r\n\r\n  useEffect(() => {\r\n    // Gérer les déconnexions\r\n    const handleDisconnection = async () => {\r\n      if (roomData && myPlayer && roomData.players && Array.isArray(roomData.players)) {\r\n        const playerIndex = roomData.players.findIndex(p => p.id === playerId);\r\n        if (playerIndex !== -1) {\r\n          await updateDoc(doc(db, 'rooms', roomCode), {\r\n            [`players.${playerIndex}.lastSeen`]: Date.now(),\r\n            [`players.${playerIndex}.connected`]: true\r\n          });\r\n        }\r\n      }\r\n    };\r\n\r\n    handleDisconnection();\r\n    const interval = setInterval(handleDisconnection, 5000);\r\n\r\n    return () => clearInterval(interval);\r\n  }, [roomCode, playerId, roomData, myPlayer]);\r\n\r\n  // Vérifier s'il y a un gagnant (premier joueur sans cartes)\r\n  const playersWithCards = roomData?.players && Array.isArray(roomData.players) \r\n    ? roomData.players.filter(p => p.cards && p.cards.length > 0) \r\n    : [];\r\n  const playersWithoutCards = roomData?.players && Array.isArray(roomData.players)\r\n    ? roomData.players.filter(p => !p.cards || p.cards.length === 0)\r\n    : [];\r\n  \r\n  // Le gagnant est le premier joueur qui n'a plus de cartes\r\n  const winner = playersWithoutCards.length > 0 ? playersWithoutCards[0] : null;\r\n  // Ou si il ne reste qu'un joueur avec des cartes, les autres ont gagné\r\n  const gameEnded = playersWithCards.length <= 1;\r\n\r\n  const selectTheme = async (theme) => {\r\n    setLoading(true);\r\n    try {\r\n      await updateDoc(doc(db, 'rooms', roomCode), {\r\n        currentTheme: theme,\r\n        gamePhase: 'playing',\r\n        themeSelectionPhase: false,\r\n        currentTurnStartTime: Date.now()\r\n      });\r\n    } catch (err) {\r\n      console.error('Erreur lors de la sélection du thème:', err);\r\n    }\r\n    setLoading(false);\r\n  };\r\n\r\n  const playCard = async () => {\r\n    if (!selectedCard || loading) return;\r\n\r\n    setLoading(true);\r\n    try {\r\n      if (!roomData?.players || !Array.isArray(roomData.players) || !myPlayer?.cards) {\r\n        setLoading(false);\r\n        return;\r\n      }\r\n\r\n      const myPlayerIndex = roomData.players.findIndex(p => p.id === playerId);\r\n      const myCards = [...myPlayer.cards];\r\n      const cardIndex = myCards.findIndex(c => c.id === selectedCard.id);\r\n      \r\n      if (cardIndex === -1) return;\r\n\r\n      let updates = {};\r\n      let nextPhase = 'voting';\r\n\r\n      // Retirer la carte jouée\r\n      myCards.splice(cardIndex, 1);\r\n      updates[`players.${myPlayerIndex}.cards`] = myCards;\r\n\r\n      // Traiter selon le type de carte\r\n      if (selectedCard.type === 'letter' || selectedCard.type === 'joker') {\r\n        if (!userWord.trim()) {\r\n          setLoading(false);\r\n          return;\r\n        }\r\n\r\n        updates.currentPlay = {\r\n          playerId: playerId,\r\n          playerName: playerName,\r\n          card: selectedCard,\r\n          word: userWord.trim(),\r\n          jokerLetter: selectedCard.type === 'joker' ? jokerLetter : null,\r\n          timestamp: Date.now()\r\n        };\r\n        updates.gamePhase = 'voting';\r\n        updates.votingStartTime = Date.now();\r\n        updates.votes = {};\r\n\r\n      } else if (selectedCard.type === 'reverse') {\r\n        updates.direction = roomData.direction * -1;\r\n        nextPhase = 'playing';\r\n        \r\n      } else if (selectedCard.type === 'stop') {\r\n        // Passer le prochain joueur\r\n        const nextIndex = getNextPlayerIndex(roomData.currentPlayerIndex, roomData.direction, roomData.players.length);\r\n        const skipIndex = getNextPlayerIndex(nextIndex, roomData.direction, roomData.players.length);\r\n        updates.currentPlayerIndex = skipIndex;\r\n        updates.currentTurnStartTime = Date.now();\r\n        nextPhase = 'playing';\r\n        \r\n      } else if (selectedCard.type === 'swap') {\r\n        if (!swapTarget) {\r\n          setLoading(false);\r\n          return;\r\n        }\r\n        \r\n        const targetPlayerIndex = roomData.players.findIndex(p => p.id === swapTarget);\r\n        if (targetPlayerIndex === -1) {\r\n          setLoading(false);\r\n          return;\r\n        }\r\n\r\n        const targetCards = [...roomData.players[targetPlayerIndex].cards];\r\n        \r\n        if (swapMode === 'single') {\r\n          // Échanger 1 carte aléatoire\r\n          if (myCards.length > 0 && targetCards.length > 0) {\r\n            const myRandomIndex = Math.floor(Math.random() * myCards.length);\r\n            const targetRandomIndex = Math.floor(Math.random() * targetCards.length);\r\n            \r\n            const tempCard = myCards[myRandomIndex];\r\n            myCards[myRandomIndex] = targetCards[targetRandomIndex];\r\n            targetCards[targetRandomIndex] = tempCard;\r\n          }\r\n        } else {\r\n          // Échanger tous les paquets\r\n          updates[`players.${myPlayerIndex}.cards`] = targetCards;\r\n          updates[`players.${targetPlayerIndex}.cards`] = myCards;\r\n        }\r\n        \r\n        if (swapMode === 'single') {\r\n          updates[`players.${myPlayerIndex}.cards`] = myCards;\r\n          updates[`players.${targetPlayerIndex}.cards`] = targetCards;\r\n        }\r\n        \r\n        nextPhase = 'playing';\r\n        \r\n      } else if (selectedCard.type === 'crakitoko') {\r\n        updates.themeChoices = selectedCard.themes;\r\n        updates.gamePhase = 'theme-selection';\r\n        updates.themeSelectionPhase = true;\r\n      }\r\n\r\n      // Passer au joueur suivant si ce n'est pas un vote\r\n      if (nextPhase === 'playing') {\r\n        const nextPlayerIndex = getNextPlayerIndex(roomData.currentPlayerIndex, roomData.direction, roomData.players.length);\r\n        updates.currentPlayerIndex = nextPlayerIndex;\r\n        updates.currentTurnStartTime = Date.now();\r\n      }\r\n\r\n      updates.gamePhase = nextPhase;\r\n      await updateDoc(doc(db, 'rooms', roomCode), updates);\r\n\r\n      // Reset des états locaux\r\n      setSelectedCard(null);\r\n      setUserWord('');\r\n      setJokerLetter('');\r\n      setSwapTarget('');\r\n      setSwapMode('single');\r\n\r\n    } catch (err) {\r\n      console.error('Erreur lors du jeu de la carte:', err);\r\n    }\r\n    setLoading(false);\r\n  };\r\n\r\n  const submitVote = async (voteValue) => {\r\n    if (loading || !roomData.currentPlay) return;\r\n\r\n    setLoading(true);\r\n    try {\r\n      const votes = { ...roomData.votes };\r\n      votes[playerId] = voteValue;\r\n\r\n      await updateDoc(doc(db, 'rooms', roomCode), {\r\n        votes: votes\r\n      });\r\n\r\n      setVote(voteValue);\r\n    } catch (err) {\r\n      console.error('Erreur lors du vote:', err);\r\n    }\r\n    setLoading(false);\r\n  };\r\n\r\n  const processVoteResults = async () => {\r\n    if (!roomData.currentPlay || !roomData.votes) return;\r\n\r\n    const votes = Object.values(roomData.votes);\r\n    const approvals = votes.filter(v => v === true).length;\r\n    const rejections = votes.filter(v => v === false).length;\r\n    const isApproved = approvals >= rejections;\r\n\r\n    const playedPlayerIndex = roomData.players.findIndex(p => p.id === roomData.currentPlay.playerId);\r\n    let updates = {};\r\n\r\n    if (!isApproved) {\r\n      // Réponse refusée - remettre la carte + 1 de la pioche\r\n      const playerCards = [...roomData.players[playedPlayerIndex].cards];\r\n      playerCards.push(roomData.currentPlay.card);\r\n      \r\n      // Ajouter une carte de la pioche\r\n      if (roomData.deck && roomData.deck.length > 0) {\r\n        const newCard = roomData.deck[0];\r\n        const remainingDeck = roomData.deck.slice(1);\r\n        playerCards.push(newCard);\r\n        updates.deck = remainingDeck;\r\n      }\r\n      \r\n      updates[`players.${playedPlayerIndex}.cards`] = playerCards;\r\n    } else {\r\n      // Réponse acceptée - appliquer les malus si nécessaire\r\n      const currentPlay = roomData.currentPlay;\r\n      let penalty = 0;\r\n      \r\n      if (currentPlay.card.type === 'letter') {\r\n        penalty = LETTER_PENALTIES[currentPlay.card.letter] || 0;\r\n      } else if (currentPlay.card.type === 'joker' && currentPlay.jokerLetter) {\r\n        penalty = LETTER_PENALTIES[currentPlay.jokerLetter] || 0;\r\n      }\r\n      \r\n      // Appliquer le malus au joueur suivant\r\n      if (penalty > 0) {\r\n        const nextPlayerIndex = getNextPlayerIndex(roomData.currentPlayerIndex, roomData.direction, roomData.players.length);\r\n        const nextPlayerCards = [...roomData.players[nextPlayerIndex].cards];\r\n        \r\n        for (let i = 0; i < penalty && roomData.deck && roomData.deck.length > 0; i++) {\r\n          nextPlayerCards.push(roomData.deck[i]);\r\n        }\r\n        \r\n        updates[`players.${nextPlayerIndex}.cards`] = nextPlayerCards;\r\n        updates.deck = roomData.deck.slice(penalty);\r\n      }\r\n    }\r\n\r\n    // Passer au joueur suivant\r\n    const nextPlayerIndex = getNextPlayerIndex(roomData.currentPlayerIndex, roomData.direction, roomData.players.length);\r\n    \r\n    updates.currentPlayerIndex = nextPlayerIndex;\r\n    updates.gamePhase = 'playing';\r\n    updates.currentPlay = null;\r\n    updates.votes = {};\r\n    updates.votingStartTime = null;\r\n    updates.currentTurnStartTime = Date.now();\r\n\r\n    await updateDoc(doc(db, 'rooms', roomCode), updates);\r\n  };\r\n\r\n  const handleTimeout = async (phase) => {\r\n    if (phase === 'playing' && isMyTurn) {\r\n      // Timeout pendant le tour du joueur - ajouter une carte\r\n      const myPlayerIndex = roomData.players.findIndex(p => p.id === playerId);\r\n      const myCards = [...myPlayer.cards];\r\n      \r\n      if (roomData.deck && roomData.deck.length > 0) {\r\n        myCards.push(roomData.deck[0]);\r\n        const remainingDeck = roomData.deck.slice(1);\r\n        \r\n        const nextPlayerIndex = getNextPlayerIndex(roomData.currentPlayerIndex, roomData.direction, roomData.players.length);\r\n        \r\n        await updateDoc(doc(db, 'rooms', roomCode), {\r\n          [`players.${myPlayerIndex}.cards`]: myCards,\r\n          deck: remainingDeck,\r\n          currentPlayerIndex: nextPlayerIndex,\r\n          currentTurnStartTime: Date.now()\r\n        });\r\n      }\r\n    } else if (phase === 'voting') {\r\n      // Timeout du vote - traiter les résultats\r\n      await processVoteResults();\r\n    }\r\n  };\r\n\r\n  if (winner || gameEnded) {\r\n    return <WinnerPanel winner={winner} playersWithoutCards={playersWithoutCards} onLeaveRoom={onLeaveRoom} />;\r\n  }\r\n\r\n  if (!roomData || !myPlayer) {\r\n    return <div className=\"loading\">Chargement...</div>;\r\n  }\r\n\r\n  return (\r\n    <div className=\"game\">\r\n      <div className=\"game-header\">\r\n        <div className=\"room-info\">\r\n          <span className=\"room-code\">Salle: {roomCode}</span>\r\n          <button onClick={onLeaveRoom} className=\"btn btn-danger leave-btn\">\r\n            Quitter\r\n          </button>\r\n        </div>\r\n        \r\n        <CurrentTheme theme={roomData.currentTheme} />\r\n        \r\n        <div className=\"players-status\">\r\n          {roomData.players && Array.isArray(roomData.players) ? roomData.players.map((player, index) => (\r\n            <div \r\n              key={player.id} \r\n              className={`player-status ${index === roomData.currentPlayerIndex ? 'current-player' : ''}`}\r\n            >\r\n              <span className=\"player-name\">{player.name}</span>\r\n              <span className=\"cards-count\">{player.cards?.length || 0}</span>\r\n            </div>\r\n          )) : null}\r\n        </div>\r\n      </div>\r\n\r\n      {/* Phase de sélection de thème */}\r\n      {gamePhase === 'theme-selection' && isMyTurn && (\r\n        <div className=\"theme-selection\">\r\n          <h2>🎯 Choisissez un thème</h2>\r\n          <div className=\"theme-choices\">\r\n            {roomData.themeChoices?.map((theme, index) => (\r\n              <button\r\n                key={index}\r\n                onClick={() => selectTheme(theme)}\r\n                className=\"btn btn-theme\"\r\n                disabled={loading}\r\n              >\r\n                {theme}\r\n              </button>\r\n            ))}\r\n          </div>\r\n        </div>\r\n      )}\r\n\r\n      {gamePhase === 'theme-selection' && !isMyTurn && (\r\n        <div className=\"waiting-theme\">\r\n          <p>⏳ {currentPlayer?.name} choisit le thème...</p>\r\n        </div>\r\n      )}\r\n\r\n      {/* Phase de jeu */}\r\n      {gamePhase === 'playing' && (\r\n        <div className=\"playing-phase\">\r\n          <Timer\r\n            duration={15}\r\n            onTimeout={() => handleTimeout('playing')}\r\n            startTime={roomData.currentTurnStartTime}\r\n            active={isMyTurn}\r\n          />\r\n\r\n          {isMyTurn && myPlayer?.cards && myPlayer.cards.length > 0 ? (\r\n            <div className=\"my-turn\">\r\n              <h2>🎮 À votre tour !</h2>\r\n              \r\n              <div className=\"my-cards\">\r\n                <h3>Vos cartes:</h3>\r\n                <div className=\"cards-grid\">\r\n                  {myPlayer?.cards && Array.isArray(myPlayer.cards) ? myPlayer.cards.map((card) => (\r\n                    <div\r\n                      key={card.id}\r\n                      className={`card ${selectedCard?.id === card.id ? 'selected' : ''}`}\r\n                      onClick={() => setSelectedCard(card)}\r\n                    >\r\n                      {card.type === 'letter' && (\r\n                        <div className=\"letter-card\">\r\n                          <span className=\"letter\">{card.letter}</span>\r\n                          <span className=\"penalty\">+{LETTER_PENALTIES[card.letter]}</span>\r\n                        </div>\r\n                      )}\r\n                      {card.type === 'joker' && (\r\n                        <div className=\"joker-card\">🃏 JOKER</div>\r\n                      )}\r\n                      {card.type === 'reverse' && (\r\n                        <div className=\"special-card\">🔄 SENS</div>\r\n                      )}\r\n                      {card.type === 'swap' && (\r\n                        <div className=\"special-card\">🔄 ÉCHANGE</div>\r\n                      )}\r\n                      {card.type === 'stop' && (\r\n                        <div className=\"special-card\">⏸️ STOP</div>\r\n                      )}\r\n                      {card.type === 'crakitoko' && (\r\n                        <div className=\"crakitoko-card\">🎯 THÈME</div>\r\n                      )}\r\n                    </div>\r\n                  )) : (\r\n                    <div>Aucune carte disponible</div>\r\n                  )}\r\n                </div>\r\n              </div>\r\n\r\n              {selectedCard && (\r\n                <div className=\"card-action\">\r\n                  {(selectedCard.type === 'letter' || selectedCard.type === 'joker') && (\r\n                    <div className=\"word-input\">\r\n                      <input\r\n                        type=\"text\"\r\n                        placeholder=\"Votre mot...\"\r\n                        value={userWord}\r\n                        onChange={(e) => setUserWord(e.target.value)}\r\n                        className=\"input-field\"\r\n                      />\r\n                      \r\n                      {selectedCard.type === 'joker' && (\r\n                        <select\r\n                          value={jokerLetter}\r\n                          onChange={(e) => setJokerLetter(e.target.value)}\r\n                          className=\"select-field\"\r\n                        >\r\n                          <option value=\"\">Choisir une lettre</option>\r\n                          {Object.keys(LETTER_PENALTIES).map(letter => (\r\n                            <option key={letter} value={letter}>\r\n                              {letter} (+{LETTER_PENALTIES[letter]})\r\n                            </option>\r\n                          ))}\r\n                        </select>\r\n                      )}\r\n                    </div>\r\n                  )}\r\n\r\n                  {selectedCard.type === 'swap' && (\r\n                    <div className=\"swap-controls\">\r\n                      <select\r\n                        value={swapTarget}\r\n                        onChange={(e) => setSwapTarget(e.target.value)}\r\n                        className=\"select-field\"\r\n                      >\r\n                        <option value=\"\">Choisir un joueur</option>\r\n                        {roomData.players && Array.isArray(roomData.players) \r\n                          ? roomData.players\r\n                            .filter(p => p.id !== playerId)\r\n                            .map(player => (\r\n                              <option key={player.id} value={player.id}>\r\n                                {player.name} ({player.cards?.length || 0} cartes)\r\n                              </option>\r\n                            ))\r\n                          : null\r\n                        }\r\n                      </select>\r\n                      \r\n                      <div className=\"swap-mode\">\r\n                        <label>\r\n                          <input\r\n                            type=\"radio\"\r\n                            name=\"swapMode\"\r\n                            value=\"single\"\r\n                            checked={swapMode === 'single'}\r\n                            onChange={(e) => setSwapMode(e.target.value)}\r\n                          />\r\n                          1 carte\r\n                        </label>\r\n                        <label>\r\n                          <input\r\n                            type=\"radio\"\r\n                            name=\"swapMode\"\r\n                            value=\"all\"\r\n                            checked={swapMode === 'all'}\r\n                            onChange={(e) => setSwapMode(e.target.value)}\r\n                          />\r\n                          Tout le paquet\r\n                        </label>\r\n                      </div>\r\n                    </div>\r\n                  )}\r\n\r\n                  <button\r\n                    onClick={playCard}\r\n                    disabled={loading || \r\n                      ((selectedCard.type === 'letter' || selectedCard.type === 'joker') && !userWord.trim()) ||\r\n                      (selectedCard.type === 'joker' && !jokerLetter) ||\r\n                      (selectedCard.type === 'swap' && !swapTarget)\r\n                    }\r\n                    className=\"btn btn-primary play-btn\"\r\n                  >\r\n                    {loading ? 'Jouer...' : 'Jouer la carte'}\r\n                  </button>\r\n                </div>\r\n              )}\r\n            </div>\r\n          ) : isMyTurn && myPlayer?.cards && myPlayer.cards.length === 0 ? (\r\n            <div className=\"finished-player\">\r\n              <h2>🎉 Vous avez terminé !</h2>\r\n              <p>Vous n'avez plus de cartes. Regardez les autres joueurs finir la partie.</p>\r\n            </div>\r\n          ) : (\r\n            <div className=\"waiting-turn\">\r\n              <p>⏳ C'est au tour de <strong>{currentPlayer?.name}</strong></p>\r\n              {myPlayer?.cards && myPlayer.cards.length === 0 && (\r\n                <p className=\"finished-status\">🎉 Vous avez terminé la partie !</p>\r\n              )}\r\n            </div>\r\n          )}\r\n        </div>\r\n      )}\r\n\r\n      {/* Phase de vote */}\r\n      {gamePhase === 'voting' && roomData.currentPlay && (\r\n        <div className=\"voting-phase\">\r\n          <Timer\r\n            duration={5}\r\n            onTimeout={() => handleTimeout('voting')}\r\n            startTime={roomData.votingStartTime}\r\n            active={true}\r\n          />\r\n\r\n          <div className=\"current-play\">\r\n            <h2>🗳️ Vote en cours</h2>\r\n            <div className=\"play-info\">\r\n              <p><strong>{roomData.currentPlay.playerName}</strong> a joué:</p>\r\n              <div className=\"played-card\">\r\n                {roomData.currentPlay.card.type === 'letter' && (\r\n                  <span className=\"letter\">{roomData.currentPlay.card.letter}</span>\r\n                )}\r\n                {roomData.currentPlay.card.type === 'joker' && (\r\n                  <span className=\"joker\">🃏 → {roomData.currentPlay.jokerLetter}</span>\r\n                )}\r\n              </div>\r\n              <p className=\"word-played\">Mot: <strong>{roomData.currentPlay.word}</strong></p>\r\n            </div>\r\n          </div>\r\n\r\n          {roomData.currentPlay.playerId !== playerId && myPlayer?.cards && myPlayer.cards.length > 0 ? (\r\n            <div className=\"vote-buttons\">\r\n              <button\r\n                onClick={() => submitVote(true)}\r\n                disabled={loading || vote !== null}\r\n                className=\"btn btn-success vote-btn\"\r\n              >\r\n                ✅ Valide\r\n              </button>\r\n              <button\r\n                onClick={() => submitVote(false)}\r\n                disabled={loading || vote !== null}\r\n                className=\"btn btn-danger vote-btn\"\r\n              >\r\n                ❌ Invalide\r\n              </button>\r\n              {vote !== null && (\r\n                <p className=\"vote-submitted\">\r\n                  Votre vote: {vote ? '✅ Valide' : '❌ Invalide'}\r\n                </p>\r\n              )}\r\n            </div>\r\n          ) : myPlayer?.cards && myPlayer.cards.length === 0 ? (\r\n            <div className=\"cannot-vote\">\r\n              <p>🎉 Vous avez terminé ! Vous ne pouvez plus voter.</p>\r\n            </div>\r\n          ) : (\r\n            <div className=\"cannot-vote\">\r\n              <p>⏳ Vous ne pouvez pas voter sur votre propre réponse.</p>\r\n            </div>\r\n          )}\r\n\r\n          <div className=\"vote-progress\">\r\n            <p>Votes reçus: {Object.keys(roomData.votes || {}).length}/{Math.max(1, (roomData.players?.filter(p => p.cards && p.cards.length > 0).length || 1) - 1)}</p>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction getNextPlayerIndex(currentIndex, direction, totalPlayers) {\r\n  if (direction === 1) {\r\n    return (currentIndex + 1) % totalPlayers;\r\n  } else {\r\n    return currentIndex === 0 ? totalPlayers - 1 : currentIndex - 1;\r\n  }\r\n}\r\n\r\nexport default Game;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}