{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\lamtm\\\\Downloads\\\\cracklist-web\\\\src\\\\components\\\\Game.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { doc, updateDoc } from 'firebase/firestore';\nimport { db } from '../firebase';\nimport Timer from './Timer';\nimport WinnerPanel from './WinnerPanel';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst LETTER_PENALTIES = {\n  'A': 0,\n  'B': 0,\n  'C': 0,\n  'D': 0,\n  'F': 0,\n  'G': 0,\n  'L': 0,\n  'M': 0,\n  'N': 0,\n  'P': 0,\n  'R': 0,\n  'S': 0,\n  'T': 0,\n  'V': 0,\n  'E': 1,\n  'I': 1,\n  'J': 1,\n  'O': 1,\n  'H': 2,\n  'K': 2,\n  'U': 2,\n  'Y': 2,\n  'Q': 3,\n  'W': 3,\n  'X': 3,\n  'Z': 3\n};\nfunction Game({\n  roomCode,\n  playerName,\n  playerId,\n  roomData,\n  onLeaveRoom\n}) {\n  _s();\n  var _roomData$themeChoice;\n  const [selectedCard, setSelectedCard] = useState(null);\n  const [vote, setVote] = useState(null);\n  const [loading, setLoading] = useState(false);\n\n  // Normaliser players pour qu'il soit toujours un Array valide\n  const normalizedPlayers = React.useMemo(() => {\n    if (!(roomData !== null && roomData !== void 0 && roomData.players)) return [];\n    if (Array.isArray(roomData.players)) {\n      return roomData.players.filter(p => p && (p.id || p.name));\n    }\n    if (typeof roomData.players === 'object') {\n      return Object.values(roomData.players).filter(p => p && typeof p === 'object' && (p.id || p.name));\n    }\n    return [];\n  }, [roomData === null || roomData === void 0 ? void 0 : roomData.players]);\n  const currentPlayer = normalizedPlayers.length > 0 && (roomData === null || roomData === void 0 ? void 0 : roomData.currentPlayerIndex) !== undefined ? normalizedPlayers[roomData.currentPlayerIndex] : null;\n  const isMyTurn = (currentPlayer === null || currentPlayer === void 0 ? void 0 : currentPlayer.id) === playerId;\n  const myPlayer = normalizedPlayers.find(p => p.id === playerId) || null;\n  const gamePhase = (roomData === null || roomData === void 0 ? void 0 : roomData.gamePhase) || 'theme-selection';\n\n  // Vérifier s'il y a un gagnant\n  const playersWithCards = normalizedPlayers.filter(p => p.cards && p.cards.length > 0);\n  const playersWithoutCards = normalizedPlayers.filter(p => !p.cards || p.cards.length === 0);\n  const firstWinner = playersWithoutCards.length > 0 && roomData !== null && roomData !== void 0 && roomData.gameStarted ? playersWithoutCards[0] : null;\n  const gameEnded = playersWithCards.length <= 1 && (roomData === null || roomData === void 0 ? void 0 : roomData.gameStarted) && playersWithoutCards.length > 0;\n  const selectTheme = async theme => {\n    setLoading(true);\n    try {\n      await updateDoc(doc(db, 'rooms', roomCode), {\n        currentTheme: theme,\n        gamePhase: 'playing',\n        themeSelectionPhase: false,\n        currentTurnStartTime: Date.now()\n      });\n    } catch (err) {\n      console.error('Erreur lors de la sélection du thème:', err);\n    }\n    setLoading(false);\n  };\n  const playCard = async card => {\n    if (!card || loading || !isMyTurn) return;\n    setLoading(true);\n    try {\n      const playerIndex = normalizedPlayers.findIndex(p => p.id === playerId);\n      if (playerIndex === -1) return;\n\n      // Créer une copie des joueurs\n      const updatedPlayers = [...normalizedPlayers];\n      const myCards = [...myPlayer.cards];\n      const cardIndex = myCards.findIndex(c => c.id === card.id);\n      if (cardIndex === -1) return;\n\n      // Retirer la carte jouée\n      myCards.splice(cardIndex, 1);\n      updatedPlayers[playerIndex] = {\n        ...updatedPlayers[playerIndex],\n        cards: myCards\n      };\n      let updates = {\n        players: updatedPlayers\n      };\n\n      // Traiter selon le type de carte\n      if (card.type === 'letter') {\n        // Pour les cartes lettres, on ajoute la carte jouée et on passe en vote\n        updates.lastPlayedCard = {\n          ...card,\n          playerId: playerId,\n          playerName: playerName,\n          timestamp: Date.now()\n        };\n        updates.gamePhase = 'voting';\n        updates.votingStartTime = Date.now();\n        updates.votes = {};\n      } else if (card.type === 'joker') {\n        // Joker - pas de malus peu importe la lettre\n        updates.lastPlayedCard = {\n          ...card,\n          playerId: playerId,\n          playerName: playerName,\n          timestamp: Date.now()\n        };\n        updates.gamePhase = 'voting';\n        updates.votingStartTime = Date.now();\n        updates.votes = {};\n      } else if (card.type === 'reverse') {\n        // Inverser le sens\n        updates.direction = roomData.direction * -1;\n        updates.lastPlayedCard = card;\n\n        // Passer au joueur suivant\n        const nextPlayerIndex = getNextPlayerIndex(roomData.currentPlayerIndex, updates.direction, normalizedPlayers);\n        updates.currentPlayerIndex = nextPlayerIndex;\n        updates.currentTurnStartTime = Date.now();\n        updates.gamePhase = 'playing';\n      } else if (card.type === 'stop') {\n        // Sauter le prochain joueur\n        updates.lastPlayedCard = card;\n        const nextIndex = getNextPlayerIndex(roomData.currentPlayerIndex, roomData.direction, normalizedPlayers);\n        const skipIndex = getNextPlayerIndex(nextIndex, roomData.direction, normalizedPlayers);\n        updates.currentPlayerIndex = skipIndex;\n        updates.currentTurnStartTime = Date.now();\n        updates.gamePhase = 'playing';\n      } else if (card.type === 'swap') {\n        // Échanger avec un joueur aléatoire\n        const otherPlayers = normalizedPlayers.filter(p => p.id !== playerId && p.cards && p.cards.length > 0);\n        if (otherPlayers.length > 0) {\n          const randomPlayer = otherPlayers[Math.floor(Math.random() * otherPlayers.length)];\n          const randomPlayerIndex = normalizedPlayers.findIndex(p => p.id === randomPlayer.id);\n\n          // Échanger les cartes\n          const tempCards = [...updatedPlayers[playerIndex].cards];\n          updatedPlayers[playerIndex].cards = [...updatedPlayers[randomPlayerIndex].cards];\n          updatedPlayers[randomPlayerIndex].cards = tempCards;\n          updates.lastPlayedCard = {\n            ...card,\n            swappedWith: randomPlayer.name\n          };\n        }\n\n        // Passer au joueur suivant\n        const nextPlayerIndex = getNextPlayerIndex(roomData.currentPlayerIndex, roomData.direction, normalizedPlayers);\n        updates.currentPlayerIndex = nextPlayerIndex;\n        updates.currentTurnStartTime = Date.now();\n        updates.gamePhase = 'playing';\n      } else if (card.type === 'crakitoko') {\n        // Changement de thème\n        updates.lastPlayedCard = card;\n        updates.themeChoices = card.themes;\n        updates.gamePhase = 'theme-selection';\n        updates.themeSelectionPhase = true;\n      }\n      await updateDoc(doc(db, 'rooms', roomCode), updates);\n    } catch (err) {\n      console.error('Erreur lors du jeu de la carte:', err);\n    }\n    setLoading(false);\n  };\n  const submitVote = async voteValue => {\n    if (loading || !roomData.lastPlayedCard) return;\n    setLoading(true);\n    try {\n      const votes = {\n        ...roomData.votes\n      };\n      votes[playerId] = voteValue;\n      await updateDoc(doc(db, 'rooms', roomCode), {\n        votes: votes\n      });\n      setVote(voteValue);\n\n      // Vérifier si tous les votes sont reçus\n      const eligibleVoters = normalizedPlayers.filter(p => p.id !== roomData.lastPlayedCard.playerId && p.cards && p.cards.length > 0);\n      if (Object.keys(votes).length >= eligibleVoters.length) {\n        // Tous les votes sont reçus, traiter les résultats\n        setTimeout(() => processVoteResults(votes), 1000);\n      }\n    } catch (err) {\n      console.error('Erreur lors du vote:', err);\n    }\n    setLoading(false);\n  };\n  const processVoteResults = async votes => {\n    if (!roomData.lastPlayedCard) return;\n    const voteValues = Object.values(votes);\n    const approvals = voteValues.filter(v => v === true).length;\n    const rejections = voteValues.filter(v => v === false).length;\n    const isApproved = approvals >= rejections;\n    const playedPlayerIndex = normalizedPlayers.findIndex(p => p.id === roomData.lastPlayedCard.playerId);\n    const updatedPlayers = [...normalizedPlayers];\n    let updates = {};\n    if (!isApproved) {\n      // Réponse refusée - remettre la carte + 1 de la pioche\n      if (playedPlayerIndex !== -1) {\n        updatedPlayers[playedPlayerIndex].cards.push(roomData.lastPlayedCard);\n\n        // Ajouter une carte de la pioche\n        if (roomData.deck && roomData.deck.length > 0) {\n          updatedPlayers[playedPlayerIndex].cards.push(roomData.deck[0]);\n          updates.deck = roomData.deck.slice(1);\n        }\n      }\n    } else if (roomData.lastPlayedCard.type === 'letter') {\n      // Réponse acceptée - appliquer les malus pour les cartes lettres seulement\n      const penalty = LETTER_PENALTIES[roomData.lastPlayedCard.letter] || 0;\n      if (penalty > 0) {\n        const nextPlayerIndex = getNextPlayerIndex(roomData.currentPlayerIndex, roomData.direction, normalizedPlayers);\n        if (nextPlayerIndex !== -1 && roomData.deck) {\n          for (let i = 0; i < penalty && i < roomData.deck.length; i++) {\n            updatedPlayers[nextPlayerIndex].cards.push(roomData.deck[i]);\n          }\n          updates.deck = roomData.deck.slice(penalty);\n        }\n      }\n    }\n    // Pour le joker, pas de malus appliqué\n\n    // Passer au joueur suivant\n    const nextPlayerIndex = getNextPlayerIndex(roomData.currentPlayerIndex, roomData.direction, normalizedPlayers);\n    updates.players = updatedPlayers;\n    updates.currentPlayerIndex = nextPlayerIndex;\n    updates.gamePhase = 'playing';\n    updates.votes = {};\n    updates.votingStartTime = null;\n    updates.currentTurnStartTime = Date.now();\n    await updateDoc(doc(db, 'rooms', roomCode), updates);\n    setVote(null);\n  };\n  const handleTimeout = async phase => {\n    if (phase === 'playing' && isMyTurn) {\n      // Timeout pendant le tour - ajouter une carte\n      const playerIndex = normalizedPlayers.findIndex(p => p.id === playerId);\n      const updatedPlayers = [...normalizedPlayers];\n      if (roomData.deck && roomData.deck.length > 0) {\n        updatedPlayers[playerIndex].cards.push(roomData.deck[0]);\n        const nextPlayerIndex = getNextPlayerIndex(roomData.currentPlayerIndex, roomData.direction, normalizedPlayers);\n        await updateDoc(doc(db, 'rooms', roomCode), {\n          players: updatedPlayers,\n          deck: roomData.deck.slice(1),\n          currentPlayerIndex: nextPlayerIndex,\n          currentTurnStartTime: Date.now()\n        });\n      }\n    } else if (phase === 'voting') {\n      // Timeout du vote - traiter avec les votes actuels\n      await processVoteResults(roomData.votes || {});\n    }\n  };\n\n  // Conditions de rendu\n  if ((firstWinner || gameEnded) && (roomData === null || roomData === void 0 ? void 0 : roomData.gamePhase) !== 'theme-selection') {\n    return /*#__PURE__*/_jsxDEV(WinnerPanel, {\n      winner: firstWinner,\n      playersWithoutCards: playersWithoutCards,\n      onLeaveRoom: onLeaveRoom\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 286,\n      columnNumber: 12\n    }, this);\n  }\n  if (!roomData || !myPlayer || normalizedPlayers.length === 0) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"loading\",\n      children: \"Chargement de la partie...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 290,\n      columnNumber: 12\n    }, this);\n  }\n  if (!roomData.gameStarted) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"loading\",\n      children: \"En attente du d\\xE9marrage de la partie...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 294,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"game\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"room-info\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"room-code\",\n          children: [\"Salle: \", roomCode]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 301,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: onLeaveRoom,\n          className: \"btn btn-danger leave-btn\",\n          children: \"Quitter\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 302,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 300,\n        columnNumber: 9\n      }, this), roomData.currentTheme && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"current-theme\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"theme-title\",\n          children: \"\\uD83C\\uDFAF Th\\xE8me actuel\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 309,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"theme-display\",\n          children: roomData.currentTheme\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 310,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 308,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 299,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game-table\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"other-players\",\n        children: normalizedPlayers.filter(p => p.id !== playerId).map((player, index) => {\n          var _player$cards, _player$cards2;\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `player-slot ${player.id === (currentPlayer === null || currentPlayer === void 0 ? void 0 : currentPlayer.id) ? 'active-player' : ''}`,\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"player-name\",\n              children: player.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 324,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"player-cards-count\",\n              children: [Array.from({\n                length: Math.min(((_player$cards = player.cards) === null || _player$cards === void 0 ? void 0 : _player$cards.length) || 0, 7)\n              }).map((_, i) => /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"card-back\"\n              }, i, false, {\n                fileName: _jsxFileName,\n                lineNumber: 327,\n                columnNumber: 19\n              }, this)), ((_player$cards2 = player.cards) === null || _player$cards2 === void 0 ? void 0 : _player$cards2.length) > 7 && /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"cards-overflow\",\n                children: [\"+\", player.cards.length - 7]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 329,\n                columnNumber: 46\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 325,\n              columnNumber: 15\n            }, this)]\n          }, player.id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 320,\n            columnNumber: 13\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 318,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"center-pile\",\n        children: roomData.lastPlayedCard && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"last-played-card\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: `card card-${roomData.lastPlayedCard.type}`,\n            children: [roomData.lastPlayedCard.type === 'letter' && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"letter-card\",\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"letter\",\n                children: roomData.lastPlayedCard.letter\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 342,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"penalty\",\n                children: [\"+\", LETTER_PENALTIES[roomData.lastPlayedCard.letter]]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 343,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 341,\n              columnNumber: 19\n            }, this), roomData.lastPlayedCard.type === 'joker' && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"joker-card\",\n              children: \"\\uD83C\\uDCCF JOKER\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 347,\n              columnNumber: 19\n            }, this), roomData.lastPlayedCard.type === 'reverse' && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"special-card\",\n              children: \"\\uD83D\\uDD04 SENS\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 350,\n              columnNumber: 19\n            }, this), roomData.lastPlayedCard.type === 'swap' && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"special-card\",\n              children: [\"\\uD83D\\uDD04 \\xC9CHANGE\", roomData.lastPlayedCard.swappedWith && /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"swap-info\",\n                children: [\"avec \", roomData.lastPlayedCard.swappedWith]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 356,\n                columnNumber: 23\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 353,\n              columnNumber: 19\n            }, this), roomData.lastPlayedCard.type === 'stop' && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"special-card\",\n              children: \"\\u23F8\\uFE0F STOP\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 361,\n              columnNumber: 19\n            }, this), roomData.lastPlayedCard.type === 'crakitoko' && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"crakitoko-card\",\n              children: \"\\uD83C\\uDFAF TH\\xC8ME\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 364,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 339,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"played-by\",\n            children: roomData.lastPlayedCard.playerName\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 367,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 338,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 336,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `game-direction ${roomData.direction === -1 ? 'reverse' : ''}`,\n        children: roomData.direction === 1 ? '↻' : '↺'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 375,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 316,\n      columnNumber: 7\n    }, this), gamePhase === 'theme-selection' && isMyTurn && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"theme-selection\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"\\uD83C\\uDFAF Choisissez un th\\xE8me\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 383,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"theme-choices\",\n        children: (_roomData$themeChoice = roomData.themeChoices) === null || _roomData$themeChoice === void 0 ? void 0 : _roomData$themeChoice.map((theme, index) => /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => selectTheme(theme),\n          className: \"btn btn-theme\",\n          disabled: loading,\n          children: theme\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 386,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 384,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 382,\n      columnNumber: 9\n    }, this), gamePhase === 'theme-selection' && !isMyTurn && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"waiting-theme\",\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"\\u23F3 \", currentPlayer === null || currentPlayer === void 0 ? void 0 : currentPlayer.name, \" choisit le th\\xE8me...\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 401,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 400,\n      columnNumber: 9\n    }, this), gamePhase === 'playing' && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Timer, {\n        duration: 15,\n        onTimeout: () => handleTimeout('playing'),\n        startTime: roomData.currentTurnStartTime,\n        active: isMyTurn\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 408,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"my-cards-area\",\n        children: isMyTurn && myPlayer !== null && myPlayer !== void 0 && myPlayer.cards && myPlayer.cards.length > 0 ? /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            className: \"your-turn-indicator\",\n            children: \"\\uD83C\\uDFAE \\xC0 votre tour !\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 419,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"my-cards\",\n            children: myPlayer.cards.map(card => /*#__PURE__*/_jsxDEV(\"div\", {\n              className: `card card-${card.type} playable`,\n              onClick: () => playCard(card),\n              children: [card.type === 'letter' && /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"letter-card\",\n                children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"letter\",\n                  children: card.letter\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 429,\n                  columnNumber: 27\n                }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"penalty\",\n                  children: [\"+\", LETTER_PENALTIES[card.letter]]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 430,\n                  columnNumber: 27\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 428,\n                columnNumber: 25\n              }, this), card.type === 'joker' && /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"joker-card\",\n                children: \"\\uD83C\\uDCCF JOKER\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 434,\n                columnNumber: 25\n              }, this), card.type === 'reverse' && /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"special-card\",\n                children: \"\\uD83D\\uDD04 SENS\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 437,\n                columnNumber: 25\n              }, this), card.type === 'swap' && /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"special-card\",\n                children: \"\\uD83D\\uDD04 \\xC9CHANGE\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 440,\n                columnNumber: 25\n              }, this), card.type === 'stop' && /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"special-card\",\n                children: \"\\u23F8\\uFE0F STOP\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 443,\n                columnNumber: 25\n              }, this), card.type === 'crakitoko' && /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"crakitoko-card\",\n                children: \"\\uD83C\\uDFAF TH\\xC8ME\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 446,\n                columnNumber: 25\n              }, this)]\n            }, card.id, true, {\n              fileName: _jsxFileName,\n              lineNumber: 422,\n              columnNumber: 21\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 420,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true) : myPlayer !== null && myPlayer !== void 0 && myPlayer.cards && myPlayer.cards.length > 0 ? /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"waiting-turn\",\n            children: [\"\\u23F3 Tour de \", currentPlayer === null || currentPlayer === void 0 ? void 0 : currentPlayer.name]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 454,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"my-cards\",\n            children: myPlayer.cards.map(card => /*#__PURE__*/_jsxDEV(\"div\", {\n              className: `card card-${card.type}`,\n              children: [card.type === 'letter' && /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"letter-card\",\n                children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"letter\",\n                  children: card.letter\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 463,\n                  columnNumber: 27\n                }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"penalty\",\n                  children: [\"+\", LETTER_PENALTIES[card.letter]]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 464,\n                  columnNumber: 27\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 462,\n                columnNumber: 25\n              }, this), card.type === 'joker' && /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"joker-card\",\n                children: \"\\uD83C\\uDCCF JOKER\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 468,\n                columnNumber: 25\n              }, this), card.type === 'reverse' && /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"special-card\",\n                children: \"\\uD83D\\uDD04 SENS\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 471,\n                columnNumber: 25\n              }, this), card.type === 'swap' && /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"special-card\",\n                children: \"\\uD83D\\uDD04 \\xC9CHANGE\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 474,\n                columnNumber: 25\n              }, this), card.type === 'stop' && /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"special-card\",\n                children: \"\\u23F8\\uFE0F STOP\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 477,\n                columnNumber: 25\n              }, this), card.type === 'crakitoko' && /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"crakitoko-card\",\n                children: \"\\uD83C\\uDFAF TH\\xC8ME\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 480,\n                columnNumber: 25\n              }, this)]\n            }, card.id, true, {\n              fileName: _jsxFileName,\n              lineNumber: 457,\n              columnNumber: 21\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 455,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true) : /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"finished-player\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: \"\\uD83C\\uDF89 Vous avez termin\\xE9 !\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 488,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Vous n'avez plus de cartes. Regardez les autres joueurs finir la partie.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 489,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 487,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 416,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true), gamePhase === 'voting' && roomData.lastPlayedCard && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"voting-phase\",\n      children: [/*#__PURE__*/_jsxDEV(Timer, {\n        duration: 10,\n        onTimeout: () => handleTimeout('voting'),\n        startTime: roomData.votingStartTime,\n        active: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 499,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"vote-info\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"\\uD83D\\uDDF3\\uFE0F Vote en cours\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 507,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: roomData.lastPlayedCard.playerName\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 509,\n            columnNumber: 15\n          }, this), \" affirme pouvoir dire un mot\", roomData.lastPlayedCard.type === 'letter' ? ` commençant par ${roomData.lastPlayedCard.letter}` : ' avec n\\'importe quelle lettre (Joker)', ' ', \"sur le th\\xE8me \\\"\", roomData.currentTheme, \"\\\"\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 508,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 506,\n        columnNumber: 11\n      }, this), roomData.lastPlayedCard.playerId !== playerId && myPlayer !== null && myPlayer !== void 0 && myPlayer.cards && myPlayer.cards.length > 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"vote-buttons\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => submitVote(true),\n          disabled: loading || vote !== null,\n          className: \"btn btn-success vote-btn\",\n          children: \"\\u2705 Je pense qu'il/elle peut\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 520,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => submitVote(false),\n          disabled: loading || vote !== null,\n          className: \"btn btn-danger vote-btn\",\n          children: \"\\u274C Je ne pense pas\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 527,\n          columnNumber: 15\n        }, this), vote !== null && /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"vote-submitted\",\n          children: \"Vote enregistr\\xE9 !\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 535,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 519,\n        columnNumber: 13\n      }, this) : myPlayer !== null && myPlayer !== void 0 && myPlayer.cards && myPlayer.cards.length === 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"cannot-vote\",\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"\\uD83C\\uDF89 Vous avez termin\\xE9 ! Vous ne pouvez plus voter.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 540,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 539,\n        columnNumber: 13\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"cannot-vote\",\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"\\u23F3 En attente des votes des autres joueurs...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 544,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 543,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"vote-progress\",\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Votes re\\xE7us: \", Object.keys(roomData.votes || {}).length, \"/\", Math.max(1, normalizedPlayers.filter(p => p.id !== roomData.lastPlayedCard.playerId && p.cards && p.cards.length > 0).length)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 549,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 548,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 498,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 298,\n    columnNumber: 5\n  }, this);\n}\n_s(Game, \"TFDZgFQQ42hOSIYDQwHZWfNEO2g=\");\n_c = Game;\nfunction getNextPlayerIndex(currentIndex, direction, players) {\n  const playersWithCards = players.filter(p => p.cards && p.cards.length > 0);\n  if (playersWithCards.length === 0) return -1;\n  let nextIndex = currentIndex;\n  let attempts = 0;\n  do {\n    if (direction === 1) {\n      nextIndex = (nextIndex + 1) % players.length;\n    } else {\n      nextIndex = nextIndex === 0 ? players.length - 1 : nextIndex - 1;\n    }\n    attempts++;\n  } while (attempts < players.length && (!players[nextIndex] || !players[nextIndex].cards || players[nextIndex].cards.length === 0));\n  return nextIndex;\n}\nexport default Game;\nvar _c;\n$RefreshReg$(_c, \"Game\");","map":{"version":3,"names":["React","useState","useEffect","doc","updateDoc","db","Timer","WinnerPanel","jsxDEV","_jsxDEV","Fragment","_Fragment","LETTER_PENALTIES","Game","roomCode","playerName","playerId","roomData","onLeaveRoom","_s","_roomData$themeChoice","selectedCard","setSelectedCard","vote","setVote","loading","setLoading","normalizedPlayers","useMemo","players","Array","isArray","filter","p","id","name","Object","values","currentPlayer","length","currentPlayerIndex","undefined","isMyTurn","myPlayer","find","gamePhase","playersWithCards","cards","playersWithoutCards","firstWinner","gameStarted","gameEnded","selectTheme","theme","currentTheme","themeSelectionPhase","currentTurnStartTime","Date","now","err","console","error","playCard","card","playerIndex","findIndex","updatedPlayers","myCards","cardIndex","c","splice","updates","type","lastPlayedCard","timestamp","votingStartTime","votes","direction","nextPlayerIndex","getNextPlayerIndex","nextIndex","skipIndex","otherPlayers","randomPlayer","Math","floor","random","randomPlayerIndex","tempCards","swappedWith","themeChoices","themes","submitVote","voteValue","eligibleVoters","keys","setTimeout","processVoteResults","voteValues","approvals","v","rejections","isApproved","playedPlayerIndex","push","deck","slice","penalty","letter","i","handleTimeout","phase","winner","fileName","_jsxFileName","lineNumber","columnNumber","className","children","onClick","map","player","index","_player$cards","_player$cards2","from","min","_","disabled","duration","onTimeout","startTime","active","max","_c","currentIndex","attempts","$RefreshReg$"],"sources":["C:/Users/lamtm/Downloads/cracklist-web/src/components/Game.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { doc, updateDoc } from 'firebase/firestore';\r\nimport { db } from '../firebase';\r\nimport Timer from './Timer';\r\nimport WinnerPanel from './WinnerPanel';\r\n\r\nconst LETTER_PENALTIES = {\r\n  'A': 0, 'B': 0, 'C': 0, 'D': 0, 'F': 0, 'G': 0, 'L': 0, 'M': 0, 'N': 0, 'P': 0, 'R': 0, 'S': 0, 'T': 0, 'V': 0,\r\n  'E': 1, 'I': 1, 'J': 1, 'O': 1,\r\n  'H': 2, 'K': 2, 'U': 2, 'Y': 2,\r\n  'Q': 3, 'W': 3, 'X': 3, 'Z': 3\r\n};\r\n\r\nfunction Game({ roomCode, playerName, playerId, roomData, onLeaveRoom }) {\r\n  const [selectedCard, setSelectedCard] = useState(null);\r\n  const [vote, setVote] = useState(null);\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  // Normaliser players pour qu'il soit toujours un Array valide\r\n  const normalizedPlayers = React.useMemo(() => {\r\n    if (!roomData?.players) return [];\r\n    \r\n    if (Array.isArray(roomData.players)) {\r\n      return roomData.players.filter(p => p && (p.id || p.name));\r\n    }\r\n    \r\n    if (typeof roomData.players === 'object') {\r\n      return Object.values(roomData.players)\r\n        .filter(p => p && typeof p === 'object' && (p.id || p.name));\r\n    }\r\n    \r\n    return [];\r\n  }, [roomData?.players]);\r\n\r\n  const currentPlayer = normalizedPlayers.length > 0 && roomData?.currentPlayerIndex !== undefined\r\n    ? normalizedPlayers[roomData.currentPlayerIndex] \r\n    : null;\r\n  const isMyTurn = currentPlayer?.id === playerId;\r\n  const myPlayer = normalizedPlayers.find(p => p.id === playerId) || null;\r\n  const gamePhase = roomData?.gamePhase || 'theme-selection';\r\n\r\n  // Vérifier s'il y a un gagnant\r\n  const playersWithCards = normalizedPlayers.filter(p => p.cards && p.cards.length > 0);\r\n  const playersWithoutCards = normalizedPlayers.filter(p => !p.cards || p.cards.length === 0);\r\n  \r\n  const firstWinner = playersWithoutCards.length > 0 && roomData?.gameStarted ? playersWithoutCards[0] : null;\r\n  const gameEnded = playersWithCards.length <= 1 && roomData?.gameStarted && playersWithoutCards.length > 0;\r\n\r\n  const selectTheme = async (theme) => {\r\n    setLoading(true);\r\n    try {\r\n      await updateDoc(doc(db, 'rooms', roomCode), {\r\n        currentTheme: theme,\r\n        gamePhase: 'playing',\r\n        themeSelectionPhase: false,\r\n        currentTurnStartTime: Date.now()\r\n      });\r\n    } catch (err) {\r\n      console.error('Erreur lors de la sélection du thème:', err);\r\n    }\r\n    setLoading(false);\r\n  };\r\n\r\n  const playCard = async (card) => {\r\n    if (!card || loading || !isMyTurn) return;\r\n\r\n    setLoading(true);\r\n    try {\r\n      const playerIndex = normalizedPlayers.findIndex(p => p.id === playerId);\r\n      if (playerIndex === -1) return;\r\n\r\n      // Créer une copie des joueurs\r\n      const updatedPlayers = [...normalizedPlayers];\r\n      const myCards = [...myPlayer.cards];\r\n      const cardIndex = myCards.findIndex(c => c.id === card.id);\r\n      \r\n      if (cardIndex === -1) return;\r\n\r\n      // Retirer la carte jouée\r\n      myCards.splice(cardIndex, 1);\r\n      updatedPlayers[playerIndex] = {\r\n        ...updatedPlayers[playerIndex],\r\n        cards: myCards\r\n      };\r\n\r\n      let updates = {\r\n        players: updatedPlayers\r\n      };\r\n\r\n      // Traiter selon le type de carte\r\n      if (card.type === 'letter') {\r\n        // Pour les cartes lettres, on ajoute la carte jouée et on passe en vote\r\n        updates.lastPlayedCard = {\r\n          ...card,\r\n          playerId: playerId,\r\n          playerName: playerName,\r\n          timestamp: Date.now()\r\n        };\r\n        updates.gamePhase = 'voting';\r\n        updates.votingStartTime = Date.now();\r\n        updates.votes = {};\r\n\r\n      } else if (card.type === 'joker') {\r\n        // Joker - pas de malus peu importe la lettre\r\n        updates.lastPlayedCard = {\r\n          ...card,\r\n          playerId: playerId,\r\n          playerName: playerName,\r\n          timestamp: Date.now()\r\n        };\r\n        updates.gamePhase = 'voting';\r\n        updates.votingStartTime = Date.now();\r\n        updates.votes = {};\r\n\r\n      } else if (card.type === 'reverse') {\r\n        // Inverser le sens\r\n        updates.direction = roomData.direction * -1;\r\n        updates.lastPlayedCard = card;\r\n        \r\n        // Passer au joueur suivant\r\n        const nextPlayerIndex = getNextPlayerIndex(roomData.currentPlayerIndex, updates.direction, normalizedPlayers);\r\n        updates.currentPlayerIndex = nextPlayerIndex;\r\n        updates.currentTurnStartTime = Date.now();\r\n        updates.gamePhase = 'playing';\r\n        \r\n      } else if (card.type === 'stop') {\r\n        // Sauter le prochain joueur\r\n        updates.lastPlayedCard = card;\r\n        const nextIndex = getNextPlayerIndex(roomData.currentPlayerIndex, roomData.direction, normalizedPlayers);\r\n        const skipIndex = getNextPlayerIndex(nextIndex, roomData.direction, normalizedPlayers);\r\n        updates.currentPlayerIndex = skipIndex;\r\n        updates.currentTurnStartTime = Date.now();\r\n        updates.gamePhase = 'playing';\r\n        \r\n      } else if (card.type === 'swap') {\r\n        // Échanger avec un joueur aléatoire\r\n        const otherPlayers = normalizedPlayers.filter(p => p.id !== playerId && p.cards && p.cards.length > 0);\r\n        if (otherPlayers.length > 0) {\r\n          const randomPlayer = otherPlayers[Math.floor(Math.random() * otherPlayers.length)];\r\n          const randomPlayerIndex = normalizedPlayers.findIndex(p => p.id === randomPlayer.id);\r\n          \r\n          // Échanger les cartes\r\n          const tempCards = [...updatedPlayers[playerIndex].cards];\r\n          updatedPlayers[playerIndex].cards = [...updatedPlayers[randomPlayerIndex].cards];\r\n          updatedPlayers[randomPlayerIndex].cards = tempCards;\r\n          \r\n          updates.lastPlayedCard = {\r\n            ...card,\r\n            swappedWith: randomPlayer.name\r\n          };\r\n        }\r\n        \r\n        // Passer au joueur suivant\r\n        const nextPlayerIndex = getNextPlayerIndex(roomData.currentPlayerIndex, roomData.direction, normalizedPlayers);\r\n        updates.currentPlayerIndex = nextPlayerIndex;\r\n        updates.currentTurnStartTime = Date.now();\r\n        updates.gamePhase = 'playing';\r\n        \r\n      } else if (card.type === 'crakitoko') {\r\n        // Changement de thème\r\n        updates.lastPlayedCard = card;\r\n        updates.themeChoices = card.themes;\r\n        updates.gamePhase = 'theme-selection';\r\n        updates.themeSelectionPhase = true;\r\n      }\r\n\r\n      await updateDoc(doc(db, 'rooms', roomCode), updates);\r\n\r\n    } catch (err) {\r\n      console.error('Erreur lors du jeu de la carte:', err);\r\n    }\r\n    setLoading(false);\r\n  };\r\n\r\n  const submitVote = async (voteValue) => {\r\n    if (loading || !roomData.lastPlayedCard) return;\r\n\r\n    setLoading(true);\r\n    try {\r\n      const votes = { ...roomData.votes };\r\n      votes[playerId] = voteValue;\r\n\r\n      await updateDoc(doc(db, 'rooms', roomCode), {\r\n        votes: votes\r\n      });\r\n\r\n      setVote(voteValue);\r\n\r\n      // Vérifier si tous les votes sont reçus\r\n      const eligibleVoters = normalizedPlayers.filter(p => \r\n        p.id !== roomData.lastPlayedCard.playerId && \r\n        p.cards && \r\n        p.cards.length > 0\r\n      );\r\n\r\n      if (Object.keys(votes).length >= eligibleVoters.length) {\r\n        // Tous les votes sont reçus, traiter les résultats\r\n        setTimeout(() => processVoteResults(votes), 1000);\r\n      }\r\n    } catch (err) {\r\n      console.error('Erreur lors du vote:', err);\r\n    }\r\n    setLoading(false);\r\n  };\r\n\r\n  const processVoteResults = async (votes) => {\r\n    if (!roomData.lastPlayedCard) return;\r\n\r\n    const voteValues = Object.values(votes);\r\n    const approvals = voteValues.filter(v => v === true).length;\r\n    const rejections = voteValues.filter(v => v === false).length;\r\n    const isApproved = approvals >= rejections;\r\n\r\n    const playedPlayerIndex = normalizedPlayers.findIndex(p => p.id === roomData.lastPlayedCard.playerId);\r\n    const updatedPlayers = [...normalizedPlayers];\r\n    let updates = {};\r\n\r\n    if (!isApproved) {\r\n      // Réponse refusée - remettre la carte + 1 de la pioche\r\n      if (playedPlayerIndex !== -1) {\r\n        updatedPlayers[playedPlayerIndex].cards.push(roomData.lastPlayedCard);\r\n        \r\n        // Ajouter une carte de la pioche\r\n        if (roomData.deck && roomData.deck.length > 0) {\r\n          updatedPlayers[playedPlayerIndex].cards.push(roomData.deck[0]);\r\n          updates.deck = roomData.deck.slice(1);\r\n        }\r\n      }\r\n    } else if (roomData.lastPlayedCard.type === 'letter') {\r\n      // Réponse acceptée - appliquer les malus pour les cartes lettres seulement\r\n      const penalty = LETTER_PENALTIES[roomData.lastPlayedCard.letter] || 0;\r\n      \r\n      if (penalty > 0) {\r\n        const nextPlayerIndex = getNextPlayerIndex(roomData.currentPlayerIndex, roomData.direction, normalizedPlayers);\r\n        \r\n        if (nextPlayerIndex !== -1 && roomData.deck) {\r\n          for (let i = 0; i < penalty && i < roomData.deck.length; i++) {\r\n            updatedPlayers[nextPlayerIndex].cards.push(roomData.deck[i]);\r\n          }\r\n          updates.deck = roomData.deck.slice(penalty);\r\n        }\r\n      }\r\n    }\r\n    // Pour le joker, pas de malus appliqué\r\n\r\n    // Passer au joueur suivant\r\n    const nextPlayerIndex = getNextPlayerIndex(roomData.currentPlayerIndex, roomData.direction, normalizedPlayers);\r\n    \r\n    updates.players = updatedPlayers;\r\n    updates.currentPlayerIndex = nextPlayerIndex;\r\n    updates.gamePhase = 'playing';\r\n    updates.votes = {};\r\n    updates.votingStartTime = null;\r\n    updates.currentTurnStartTime = Date.now();\r\n\r\n    await updateDoc(doc(db, 'rooms', roomCode), updates);\r\n    setVote(null);\r\n  };\r\n\r\n  const handleTimeout = async (phase) => {\r\n    if (phase === 'playing' && isMyTurn) {\r\n      // Timeout pendant le tour - ajouter une carte\r\n      const playerIndex = normalizedPlayers.findIndex(p => p.id === playerId);\r\n      const updatedPlayers = [...normalizedPlayers];\r\n      \r\n      if (roomData.deck && roomData.deck.length > 0) {\r\n        updatedPlayers[playerIndex].cards.push(roomData.deck[0]);\r\n        \r\n        const nextPlayerIndex = getNextPlayerIndex(roomData.currentPlayerIndex, roomData.direction, normalizedPlayers);\r\n        \r\n        await updateDoc(doc(db, 'rooms', roomCode), {\r\n          players: updatedPlayers,\r\n          deck: roomData.deck.slice(1),\r\n          currentPlayerIndex: nextPlayerIndex,\r\n          currentTurnStartTime: Date.now()\r\n        });\r\n      }\r\n    } else if (phase === 'voting') {\r\n      // Timeout du vote - traiter avec les votes actuels\r\n      await processVoteResults(roomData.votes || {});\r\n    }\r\n  };\r\n\r\n  // Conditions de rendu\r\n  if ((firstWinner || gameEnded) && roomData?.gamePhase !== 'theme-selection') {\r\n    return <WinnerPanel winner={firstWinner} playersWithoutCards={playersWithoutCards} onLeaveRoom={onLeaveRoom} />;\r\n  }\r\n\r\n  if (!roomData || !myPlayer || normalizedPlayers.length === 0) {\r\n    return <div className=\"loading\">Chargement de la partie...</div>;\r\n  }\r\n\r\n  if (!roomData.gameStarted) {\r\n    return <div className=\"loading\">En attente du démarrage de la partie...</div>;\r\n  }\r\n\r\n  return (\r\n    <div className=\"game\">\r\n      <div className=\"game-header\">\r\n        <div className=\"room-info\">\r\n          <span className=\"room-code\">Salle: {roomCode}</span>\r\n          <button onClick={onLeaveRoom} className=\"btn btn-danger leave-btn\">\r\n            Quitter\r\n          </button>\r\n        </div>\r\n        \r\n        {roomData.currentTheme && (\r\n          <div className=\"current-theme\">\r\n            <h2 className=\"theme-title\">🎯 Thème actuel</h2>\r\n            <div className=\"theme-display\">{roomData.currentTheme}</div>\r\n          </div>\r\n        )}\r\n      </div>\r\n\r\n      {/* Zone de jeu centrale style UNO */}\r\n      <div className=\"game-table\">\r\n        {/* Afficher les autres joueurs en haut */}\r\n        <div className=\"other-players\">\r\n          {normalizedPlayers.filter(p => p.id !== playerId).map((player, index) => (\r\n            <div \r\n              key={player.id} \r\n              className={`player-slot ${player.id === currentPlayer?.id ? 'active-player' : ''}`}\r\n            >\r\n              <div className=\"player-name\">{player.name}</div>\r\n              <div className=\"player-cards-count\">\r\n                {Array.from({ length: Math.min(player.cards?.length || 0, 7) }).map((_, i) => (\r\n                  <div key={i} className=\"card-back\"></div>\r\n                ))}\r\n                {player.cards?.length > 7 && <span className=\"cards-overflow\">+{player.cards.length - 7}</span>}\r\n              </div>\r\n            </div>\r\n          ))}\r\n        </div>\r\n\r\n        {/* Pile centrale */}\r\n        <div className=\"center-pile\">\r\n          {roomData.lastPlayedCard && (\r\n            <div className=\"last-played-card\">\r\n              <div className={`card card-${roomData.lastPlayedCard.type}`}>\r\n                {roomData.lastPlayedCard.type === 'letter' && (\r\n                  <div className=\"letter-card\">\r\n                    <span className=\"letter\">{roomData.lastPlayedCard.letter}</span>\r\n                    <span className=\"penalty\">+{LETTER_PENALTIES[roomData.lastPlayedCard.letter]}</span>\r\n                  </div>\r\n                )}\r\n                {roomData.lastPlayedCard.type === 'joker' && (\r\n                  <div className=\"joker-card\">🃏 JOKER</div>\r\n                )}\r\n                {roomData.lastPlayedCard.type === 'reverse' && (\r\n                  <div className=\"special-card\">🔄 SENS</div>\r\n                )}\r\n                {roomData.lastPlayedCard.type === 'swap' && (\r\n                  <div className=\"special-card\">\r\n                    🔄 ÉCHANGE\r\n                    {roomData.lastPlayedCard.swappedWith && (\r\n                      <span className=\"swap-info\">avec {roomData.lastPlayedCard.swappedWith}</span>\r\n                    )}\r\n                  </div>\r\n                )}\r\n                {roomData.lastPlayedCard.type === 'stop' && (\r\n                  <div className=\"special-card\">⏸️ STOP</div>\r\n                )}\r\n                {roomData.lastPlayedCard.type === 'crakitoko' && (\r\n                  <div className=\"crakitoko-card\">🎯 THÈME</div>\r\n                )}\r\n              </div>\r\n              <div className=\"played-by\">\r\n                {roomData.lastPlayedCard.playerName}\r\n              </div>\r\n            </div>\r\n          )}\r\n        </div>\r\n\r\n        {/* Direction du jeu */}\r\n        <div className={`game-direction ${roomData.direction === -1 ? 'reverse' : ''}`}>\r\n          {roomData.direction === 1 ? '↻' : '↺'}\r\n        </div>\r\n      </div>\r\n\r\n      {/* Phase de sélection de thème */}\r\n      {gamePhase === 'theme-selection' && isMyTurn && (\r\n        <div className=\"theme-selection\">\r\n          <h2>🎯 Choisissez un thème</h2>\r\n          <div className=\"theme-choices\">\r\n            {roomData.themeChoices?.map((theme, index) => (\r\n              <button\r\n                key={index}\r\n                onClick={() => selectTheme(theme)}\r\n                className=\"btn btn-theme\"\r\n                disabled={loading}\r\n              >\r\n                {theme}\r\n              </button>\r\n            ))}\r\n          </div>\r\n        </div>\r\n      )}\r\n\r\n      {gamePhase === 'theme-selection' && !isMyTurn && (\r\n        <div className=\"waiting-theme\">\r\n          <p>⏳ {currentPlayer?.name} choisit le thème...</p>\r\n        </div>\r\n      )}\r\n\r\n      {/* Phase de jeu */}\r\n      {gamePhase === 'playing' && (\r\n        <>\r\n          <Timer\r\n            duration={15}\r\n            onTimeout={() => handleTimeout('playing')}\r\n            startTime={roomData.currentTurnStartTime}\r\n            active={isMyTurn}\r\n          />\r\n\r\n          {/* Mes cartes en bas */}\r\n          <div className=\"my-cards-area\">\r\n            {isMyTurn && myPlayer?.cards && myPlayer.cards.length > 0 ? (\r\n              <>\r\n                <h3 className=\"your-turn-indicator\">🎮 À votre tour !</h3>\r\n                <div className=\"my-cards\">\r\n                  {myPlayer.cards.map((card) => (\r\n                    <div\r\n                      key={card.id}\r\n                      className={`card card-${card.type} playable`}\r\n                      onClick={() => playCard(card)}\r\n                    >\r\n                      {card.type === 'letter' && (\r\n                        <div className=\"letter-card\">\r\n                          <span className=\"letter\">{card.letter}</span>\r\n                          <span className=\"penalty\">+{LETTER_PENALTIES[card.letter]}</span>\r\n                        </div>\r\n                      )}\r\n                      {card.type === 'joker' && (\r\n                        <div className=\"joker-card\">🃏 JOKER</div>\r\n                      )}\r\n                      {card.type === 'reverse' && (\r\n                        <div className=\"special-card\">🔄 SENS</div>\r\n                      )}\r\n                      {card.type === 'swap' && (\r\n                        <div className=\"special-card\">🔄 ÉCHANGE</div>\r\n                      )}\r\n                      {card.type === 'stop' && (\r\n                        <div className=\"special-card\">⏸️ STOP</div>\r\n                      )}\r\n                      {card.type === 'crakitoko' && (\r\n                        <div className=\"crakitoko-card\">🎯 THÈME</div>\r\n                      )}\r\n                    </div>\r\n                  ))}\r\n                </div>\r\n              </>\r\n            ) : myPlayer?.cards && myPlayer.cards.length > 0 ? (\r\n              <>\r\n                <p className=\"waiting-turn\">⏳ Tour de {currentPlayer?.name}</p>\r\n                <div className=\"my-cards\">\r\n                  {myPlayer.cards.map((card) => (\r\n                    <div\r\n                      key={card.id}\r\n                      className={`card card-${card.type}`}\r\n                    >\r\n                      {card.type === 'letter' && (\r\n                        <div className=\"letter-card\">\r\n                          <span className=\"letter\">{card.letter}</span>\r\n                          <span className=\"penalty\">+{LETTER_PENALTIES[card.letter]}</span>\r\n                        </div>\r\n                      )}\r\n                      {card.type === 'joker' && (\r\n                        <div className=\"joker-card\">🃏 JOKER</div>\r\n                      )}\r\n                      {card.type === 'reverse' && (\r\n                        <div className=\"special-card\">🔄 SENS</div>\r\n                      )}\r\n                      {card.type === 'swap' && (\r\n                        <div className=\"special-card\">🔄 ÉCHANGE</div>\r\n                      )}\r\n                      {card.type === 'stop' && (\r\n                        <div className=\"special-card\">⏸️ STOP</div>\r\n                      )}\r\n                      {card.type === 'crakitoko' && (\r\n                        <div className=\"crakitoko-card\">🎯 THÈME</div>\r\n                      )}\r\n                    </div>\r\n                  ))}\r\n                </div>\r\n              </>\r\n            ) : (\r\n              <div className=\"finished-player\">\r\n                <h2>🎉 Vous avez terminé !</h2>\r\n                <p>Vous n'avez plus de cartes. Regardez les autres joueurs finir la partie.</p>\r\n              </div>\r\n            )}\r\n          </div>\r\n        </>\r\n      )}\r\n\r\n      {/* Phase de vote */}\r\n      {gamePhase === 'voting' && roomData.lastPlayedCard && (\r\n        <div className=\"voting-phase\">\r\n          <Timer\r\n            duration={10}\r\n            onTimeout={() => handleTimeout('voting')}\r\n            startTime={roomData.votingStartTime}\r\n            active={true}\r\n          />\r\n\r\n          <div className=\"vote-info\">\r\n            <h2>🗳️ Vote en cours</h2>\r\n            <p>\r\n              <strong>{roomData.lastPlayedCard.playerName}</strong> affirme pouvoir dire un mot \r\n              {roomData.lastPlayedCard.type === 'letter' ? \r\n                ` commençant par ${roomData.lastPlayedCard.letter}` : \r\n                ' avec n\\'importe quelle lettre (Joker)'\r\n              }\r\n              {' '}sur le thème \"{roomData.currentTheme}\"\r\n            </p>\r\n          </div>\r\n\r\n          {roomData.lastPlayedCard.playerId !== playerId && myPlayer?.cards && myPlayer.cards.length > 0 ? (\r\n            <div className=\"vote-buttons\">\r\n              <button\r\n                onClick={() => submitVote(true)}\r\n                disabled={loading || vote !== null}\r\n                className=\"btn btn-success vote-btn\"\r\n              >\r\n                ✅ Je pense qu'il/elle peut\r\n              </button>\r\n              <button\r\n                onClick={() => submitVote(false)}\r\n                disabled={loading || vote !== null}\r\n                className=\"btn btn-danger vote-btn\"\r\n              >\r\n                ❌ Je ne pense pas\r\n              </button>\r\n              {vote !== null && (\r\n                <p className=\"vote-submitted\">Vote enregistré !</p>\r\n              )}\r\n            </div>\r\n          ) : myPlayer?.cards && myPlayer.cards.length === 0 ? (\r\n            <div className=\"cannot-vote\">\r\n              <p>🎉 Vous avez terminé ! Vous ne pouvez plus voter.</p>\r\n            </div>\r\n          ) : (\r\n            <div className=\"cannot-vote\">\r\n              <p>⏳ En attente des votes des autres joueurs...</p>\r\n            </div>\r\n          )}\r\n\r\n          <div className=\"vote-progress\">\r\n            <p>Votes reçus: {Object.keys(roomData.votes || {}).length}/{Math.max(1, normalizedPlayers.filter(p => p.id !== roomData.lastPlayedCard.playerId && p.cards && p.cards.length > 0).length)}</p>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction getNextPlayerIndex(currentIndex, direction, players) {\r\n  const playersWithCards = players.filter(p => p.cards && p.cards.length > 0);\r\n  if (playersWithCards.length === 0) return -1;\r\n\r\n  let nextIndex = currentIndex;\r\n  let attempts = 0;\r\n  \r\n  do {\r\n    if (direction === 1) {\r\n      nextIndex = (nextIndex + 1) % players.length;\r\n    } else {\r\n      nextIndex = nextIndex === 0 ? players.length - 1 : nextIndex - 1;\r\n    }\r\n    attempts++;\r\n  } while (attempts < players.length && (!players[nextIndex] || !players[nextIndex].cards || players[nextIndex].cards.length === 0));\r\n  \r\n  return nextIndex;\r\n}\r\n\r\nexport default Game;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}