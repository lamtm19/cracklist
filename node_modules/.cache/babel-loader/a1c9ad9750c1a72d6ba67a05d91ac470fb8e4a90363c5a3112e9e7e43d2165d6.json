{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\lamtm\\\\Downloads\\\\cracklist-web\\\\src\\\\components\\\\Lobby.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { doc, updateDoc } from 'firebase/firestore';\nimport { db } from '../firebase';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Lobby({\n  roomCode,\n  playerName,\n  playerId,\n  roomData,\n  onLeaveRoom\n}) {\n  _s();\n  var _normalizedPlayers$fi;\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState('');\n\n  // Debug logs\n  console.log('🏠 Lobby - roomData reçue:', roomData);\n  console.log('🏠 Lobby - players:', roomData === null || roomData === void 0 ? void 0 : roomData.players);\n  console.log('👤 Lobby - playerId:', playerId);\n\n  // Normaliser players pour qu'il soit toujours un Array\n  const normalizedPlayers = React.useMemo(() => {\n    if (!(roomData !== null && roomData !== void 0 && roomData.players)) return [];\n\n    // Si c'est déjà un Array, le retourner\n    if (Array.isArray(roomData.players)) {\n      return roomData.players;\n    }\n\n    // Si c'est un Object, le convertir en Array\n    if (typeof roomData.players === 'object') {\n      console.log('🔧 Conversion Object vers Array');\n      return Object.values(roomData.players);\n    }\n    return [];\n  }, [roomData === null || roomData === void 0 ? void 0 : roomData.players]);\n  console.log('🔧 Players normalisés:', normalizedPlayers);\n  const isHost = ((_normalizedPlayers$fi = normalizedPlayers.find(p => p.id === playerId)) === null || _normalizedPlayers$fi === void 0 ? void 0 : _normalizedPlayers$fi.isHost) || false;\n  const canStart = normalizedPlayers.length >= 2;\n  console.log('👑 Lobby - isHost:', isHost);\n  console.log('▶️ Lobby - canStart:', canStart);\n  useEffect(() => {\n    // Mettre à jour la présence du joueur\n    const updatePresence = async () => {\n      if (roomData && normalizedPlayers.length > 0) {\n        const playerIndex = normalizedPlayers.findIndex(p => p.id === playerId);\n        if (playerIndex !== -1) {\n          // Vérifier et corriger la structure si nécessaire\n          const needsRepair = !Array.isArray(roomData.players) || !normalizedPlayers.some(p => p.isHost);\n          if (needsRepair) {\n            console.log('🔧 Réparation de la structure room nécessaire');\n            const repairedPlayers = [...normalizedPlayers];\n\n            // S'assurer qu'il y a au moins un hôte (le premier joueur)\n            if (!repairedPlayers.some(p => p.isHost)) {\n              repairedPlayers[0].isHost = true;\n              console.log('👑 Attribution des droits d\\'hôte au premier joueur');\n            }\n            await updateDoc(doc(db, 'rooms', roomCode), {\n              players: repairedPlayers,\n              [`players.${playerIndex}.lastSeen`]: Date.now(),\n              [`players.${playerIndex}.connected`]: true\n            });\n          } else {\n            await updateDoc(doc(db, 'rooms', roomCode), {\n              [`players.${playerIndex}.lastSeen`]: Date.now(),\n              [`players.${playerIndex}.connected`]: true\n            });\n          }\n        }\n      }\n    };\n    updatePresence();\n    const interval = setInterval(updatePresence, 10000); // Toutes les 10 secondes\n\n    return () => clearInterval(interval);\n  }, [roomCode, playerId, normalizedPlayers, roomData]);\n  const startGame = async () => {\n    if (!canStart) {\n      setError('Il faut au moins 2 joueurs pour commencer');\n      return;\n    }\n    setLoading(true);\n    setError('');\n    try {\n      // Choisir un joueur aléatoire pour choisir le thème initial\n      const randomPlayerIndex = Math.floor(Math.random() * normalizedPlayers.length);\n      await updateDoc(doc(db, 'rooms', roomCode), {\n        gameStarted: true,\n        currentPlayerIndex: randomPlayerIndex,\n        themeSelectionPhase: true,\n        gamePhase: 'theme-selection',\n        currentRound: 1,\n        gameStartTime: Date.now()\n      });\n    } catch (err) {\n      setError('Erreur lors du démarrage de la partie');\n      console.error(err);\n    }\n    setLoading(false);\n  };\n  const leaveRoom = async () => {\n    try {\n      if (roomData && normalizedPlayers.length > 0) {\n        const updatedPlayers = normalizedPlayers.filter(p => p.id !== playerId);\n        if (updatedPlayers.length === 0) {\n          // Supprimer la room si plus de joueurs\n          // Note: Vous pourriez vouloir implémenter une fonction cloud pour nettoyer automatiquement\n        } else {\n          // Si l'hôte part, donner les droits d'hôte au premier joueur restant\n          if (isHost && updatedPlayers.length > 0) {\n            updatedPlayers[0].isHost = true;\n          }\n          await updateDoc(doc(db, 'rooms', roomCode), {\n            players: updatedPlayers\n          });\n        }\n      }\n    } catch (err) {\n      console.error('Erreur lors de la sortie de la room:', err);\n    }\n    onLeaveRoom();\n  };\n  if (!roomData) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"loading\",\n      children: \"Chargement...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"lobby\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"lobby-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"lobby-header\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: [\"\\uD83C\\uDFAE Salle: \", roomCode]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: leaveRoom,\n          className: \"btn btn-danger leave-btn\",\n          children: \"Quitter\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 144,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"players-section\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: [\"\\uD83D\\uDC65 Joueurs (\", normalizedPlayers.length, \"/10)\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 150,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"players-list\",\n          children: normalizedPlayers.length > 0 ? normalizedPlayers.map((player, index) => {\n            console.log('🎭 Rendu joueur:', player.name, 'isHost:', player.isHost);\n            return /*#__PURE__*/_jsxDEV(\"div\", {\n              className: `player-card ${!player.connected ? 'disconnected' : ''}`,\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"player-name\",\n                children: [player.name, player.isHost && /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"host-badge\",\n                  children: \"\\uD83D\\uDC51\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 158,\n                  columnNumber: 39\n                }, this), !player.connected && /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"disconnect-badge\",\n                  children: \"\\uD83D\\uDCF4\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 159,\n                  columnNumber: 43\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 156,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"cards-count\",\n                children: \"Pr\\xEAt\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 161,\n                columnNumber: 19\n              }, this)]\n            }, player.id, true, {\n              fileName: _jsxFileName,\n              lineNumber: 155,\n              columnNumber: 17\n            }, this);\n          }) : /*#__PURE__*/_jsxDEV(\"div\", {\n            children: \"Chargement des joueurs...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 165,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 151,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 9\n      }, this), isHost && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"host-controls\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"\\uD83C\\uDFAF Contr\\xF4les d'h\\xF4te\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 172,\n          columnNumber: 13\n        }, this), !canStart && /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"warning\",\n          children: \"Il faut au moins 2 joueurs pour commencer la partie.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 175,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: startGame,\n          disabled: !canStart || loading,\n          className: \"btn btn-primary start-btn\",\n          children: loading ? 'Démarrage...' : 'Commencer la partie'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 178,\n          columnNumber: 13\n        }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"error-message\",\n          children: error\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 186,\n          columnNumber: 23\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 11\n      }, this), !isHost && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"waiting-message\",\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"\\u23F3 En attente que l'h\\xF4te lance la partie...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 192,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"lobby-info\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"\\uD83D\\uDCCB Informations\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 197,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: [/*#__PURE__*/_jsxDEV(\"li\", {\n            children: \"\\uD83C\\uDFAF Objectif : Se d\\xE9barrasser de toutes ses cartes en premier !\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 199,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: \"\\u23F1\\uFE0F 15 secondes pour jouer, 5 secondes pour voter\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 200,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: \"\\uD83C\\uDCCF Utilisez les cartes sp\\xE9ciales \\xE0 bon escient\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 201,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: \"\\uD83C\\uDFC6 Le premier sans cartes gagne !\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 202,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: \"\\uD83D\\uDC65 Les joueurs sans cartes continuent \\xE0 regarder\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 203,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 198,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 196,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 140,\n    columnNumber: 5\n  }, this);\n}\n_s(Lobby, \"Ye53rK4AvgxQoJ+6/dr/HdqroR0=\");\n_c = Lobby;\nexport default Lobby;\nvar _c;\n$RefreshReg$(_c, \"Lobby\");","map":{"version":3,"names":["React","useState","useEffect","doc","updateDoc","db","jsxDEV","_jsxDEV","Lobby","roomCode","playerName","playerId","roomData","onLeaveRoom","_s","_normalizedPlayers$fi","loading","setLoading","error","setError","console","log","players","normalizedPlayers","useMemo","Array","isArray","Object","values","isHost","find","p","id","canStart","length","updatePresence","playerIndex","findIndex","needsRepair","some","repairedPlayers","Date","now","interval","setInterval","clearInterval","startGame","randomPlayerIndex","Math","floor","random","gameStarted","currentPlayerIndex","themeSelectionPhase","gamePhase","currentRound","gameStartTime","err","leaveRoom","updatedPlayers","filter","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","map","player","index","name","connected","disabled","_c","$RefreshReg$"],"sources":["C:/Users/lamtm/Downloads/cracklist-web/src/components/Lobby.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { doc, updateDoc } from 'firebase/firestore';\r\nimport { db } from '../firebase';\r\n\r\nfunction Lobby({ roomCode, playerName, playerId, roomData, onLeaveRoom }) {\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState('');\r\n\r\n  // Debug logs\r\n  console.log('🏠 Lobby - roomData reçue:', roomData);\r\n  console.log('🏠 Lobby - players:', roomData?.players);\r\n  console.log('👤 Lobby - playerId:', playerId);\r\n\r\n  // Normaliser players pour qu'il soit toujours un Array\r\n  const normalizedPlayers = React.useMemo(() => {\r\n    if (!roomData?.players) return [];\r\n    \r\n    // Si c'est déjà un Array, le retourner\r\n    if (Array.isArray(roomData.players)) {\r\n      return roomData.players;\r\n    }\r\n    \r\n    // Si c'est un Object, le convertir en Array\r\n    if (typeof roomData.players === 'object') {\r\n      console.log('🔧 Conversion Object vers Array');\r\n      return Object.values(roomData.players);\r\n    }\r\n    \r\n    return [];\r\n  }, [roomData?.players]);\r\n\r\n  console.log('🔧 Players normalisés:', normalizedPlayers);\r\n\r\n  const isHost = normalizedPlayers.find(p => p.id === playerId)?.isHost || false;\r\n  const canStart = normalizedPlayers.length >= 2;\r\n\r\n  console.log('👑 Lobby - isHost:', isHost);\r\n  console.log('▶️ Lobby - canStart:', canStart);\r\n\r\n  useEffect(() => {\r\n    // Mettre à jour la présence du joueur\r\n    const updatePresence = async () => {\r\n      if (roomData && normalizedPlayers.length > 0) {\r\n        const playerIndex = normalizedPlayers.findIndex(p => p.id === playerId);\r\n        if (playerIndex !== -1) {\r\n          // Vérifier et corriger la structure si nécessaire\r\n          const needsRepair = !Array.isArray(roomData.players) || !normalizedPlayers.some(p => p.isHost);\r\n          \r\n          if (needsRepair) {\r\n            console.log('🔧 Réparation de la structure room nécessaire');\r\n            const repairedPlayers = [...normalizedPlayers];\r\n            \r\n            // S'assurer qu'il y a au moins un hôte (le premier joueur)\r\n            if (!repairedPlayers.some(p => p.isHost)) {\r\n              repairedPlayers[0].isHost = true;\r\n              console.log('👑 Attribution des droits d\\'hôte au premier joueur');\r\n            }\r\n            \r\n            await updateDoc(doc(db, 'rooms', roomCode), {\r\n              players: repairedPlayers,\r\n              [`players.${playerIndex}.lastSeen`]: Date.now(),\r\n              [`players.${playerIndex}.connected`]: true\r\n            });\r\n          } else {\r\n            await updateDoc(doc(db, 'rooms', roomCode), {\r\n              [`players.${playerIndex}.lastSeen`]: Date.now(),\r\n              [`players.${playerIndex}.connected`]: true\r\n            });\r\n          }\r\n        }\r\n      }\r\n    };\r\n\r\n    updatePresence();\r\n    const interval = setInterval(updatePresence, 10000); // Toutes les 10 secondes\r\n\r\n    return () => clearInterval(interval);\r\n  }, [roomCode, playerId, normalizedPlayers, roomData]);\r\n\r\n  const startGame = async () => {\r\n    if (!canStart) {\r\n      setError('Il faut au moins 2 joueurs pour commencer');\r\n      return;\r\n    }\r\n\r\n    setLoading(true);\r\n    setError('');\r\n\r\n    try {\r\n      // Choisir un joueur aléatoire pour choisir le thème initial\r\n      const randomPlayerIndex = Math.floor(Math.random() * normalizedPlayers.length);\r\n      \r\n      await updateDoc(doc(db, 'rooms', roomCode), {\r\n        gameStarted: true,\r\n        currentPlayerIndex: randomPlayerIndex,\r\n        themeSelectionPhase: true,\r\n        gamePhase: 'theme-selection',\r\n        currentRound: 1,\r\n        gameStartTime: Date.now()\r\n      });\r\n    } catch (err) {\r\n      setError('Erreur lors du démarrage de la partie');\r\n      console.error(err);\r\n    }\r\n\r\n    setLoading(false);\r\n  };\r\n\r\n  const leaveRoom = async () => {\r\n    try {\r\n      if (roomData && normalizedPlayers.length > 0) {\r\n        const updatedPlayers = normalizedPlayers.filter(p => p.id !== playerId);\r\n        \r\n        if (updatedPlayers.length === 0) {\r\n          // Supprimer la room si plus de joueurs\r\n          // Note: Vous pourriez vouloir implémenter une fonction cloud pour nettoyer automatiquement\r\n        } else {\r\n          // Si l'hôte part, donner les droits d'hôte au premier joueur restant\r\n          if (isHost && updatedPlayers.length > 0) {\r\n            updatedPlayers[0].isHost = true;\r\n          }\r\n          \r\n          await updateDoc(doc(db, 'rooms', roomCode), {\r\n            players: updatedPlayers\r\n          });\r\n        }\r\n      }\r\n    } catch (err) {\r\n      console.error('Erreur lors de la sortie de la room:', err);\r\n    }\r\n    \r\n    onLeaveRoom();\r\n  };\r\n\r\n  if (!roomData) {\r\n    return <div className=\"loading\">Chargement...</div>;\r\n  }\r\n\r\n  return (\r\n    <div className=\"lobby\">\r\n      <div className=\"lobby-container\">\r\n        <div className=\"lobby-header\">\r\n          <h1>🎮 Salle: {roomCode}</h1>\r\n          <button onClick={leaveRoom} className=\"btn btn-danger leave-btn\">\r\n            Quitter\r\n          </button>\r\n        </div>\r\n\r\n        <div className=\"players-section\">\r\n          <h2>👥 Joueurs ({normalizedPlayers.length}/10)</h2>\r\n          <div className=\"players-list\">\r\n            {normalizedPlayers.length > 0 ? normalizedPlayers.map((player, index) => {\r\n              console.log('🎭 Rendu joueur:', player.name, 'isHost:', player.isHost);\r\n              return (\r\n                <div key={player.id} className={`player-card ${!player.connected ? 'disconnected' : ''}`}>\r\n                  <span className=\"player-name\">\r\n                    {player.name}\r\n                    {player.isHost && <span className=\"host-badge\">👑</span>}\r\n                    {!player.connected && <span className=\"disconnect-badge\">📴</span>}\r\n                  </span>\r\n                  <span className=\"cards-count\">Prêt</span>\r\n                </div>\r\n              );\r\n            }) : (\r\n              <div>Chargement des joueurs...</div>\r\n            )}\r\n          </div>\r\n        </div>\r\n\r\n        {isHost && (\r\n          <div className=\"host-controls\">\r\n            <h3>🎯 Contrôles d'hôte</h3>\r\n            \r\n            {!canStart && (\r\n              <p className=\"warning\">Il faut au moins 2 joueurs pour commencer la partie.</p>\r\n            )}\r\n            \r\n            <button \r\n              onClick={startGame}\r\n              disabled={!canStart || loading}\r\n              className=\"btn btn-primary start-btn\"\r\n            >\r\n              {loading ? 'Démarrage...' : 'Commencer la partie'}\r\n            </button>\r\n            \r\n            {error && <div className=\"error-message\">{error}</div>}\r\n          </div>\r\n        )}\r\n\r\n        {!isHost && (\r\n          <div className=\"waiting-message\">\r\n            <p>⏳ En attente que l'hôte lance la partie...</p>\r\n          </div>\r\n        )}\r\n\r\n        <div className=\"lobby-info\">\r\n          <h3>📋 Informations</h3>\r\n          <ul>\r\n            <li>🎯 Objectif : Se débarrasser de toutes ses cartes en premier !</li>\r\n            <li>⏱️ 15 secondes pour jouer, 5 secondes pour voter</li>\r\n            <li>🃏 Utilisez les cartes spéciales à bon escient</li>\r\n            <li>🏆 Le premier sans cartes gagne !</li>\r\n            <li>👥 Les joueurs sans cartes continuent à regarder</li>\r\n          </ul>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Lobby;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}