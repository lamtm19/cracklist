{"ast":null,"code":"import _objectSpread from\"C:/Users/lamtm/Downloads/cracklist-web/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import React,{useState,useEffect}from'react';import{doc,updateDoc}from'firebase/firestore';import{db}from'../firebase';import Timer from'./Timer';import WinnerPanel from'./WinnerPanel';import{jsx as _jsx,jsxs as _jsxs,Fragment as _Fragment}from\"react/jsx-runtime\";const LETTER_PENALTIES={'A':0,'B':0,'C':0,'D':0,'F':0,'G':0,'L':0,'M':0,'N':0,'P':0,'R':0,'S':0,'T':0,'V':0,'E':1,'I':1,'J':1,'O':1,'H':2,'K':2,'U':2,'Y':2,'Q':3,'W':3,'X':3,'Z':3};function Game(_ref){var _roomData$themeChoice;let{roomCode,playerName,playerId,roomData,onLeaveRoom}=_ref;const[vote,setVote]=useState(null);const[loading,setLoading]=useState(false);// Normaliser players pour qu'il soit toujours un Array valide\nconst normalizedPlayers=React.useMemo(()=>{if(!(roomData!==null&&roomData!==void 0&&roomData.players))return[];if(Array.isArray(roomData.players)){return roomData.players.filter(p=>p&&(p.id||p.name));}if(typeof roomData.players==='object'){return Object.values(roomData.players).filter(p=>p&&typeof p==='object'&&(p.id||p.name));}return[];},[roomData===null||roomData===void 0?void 0:roomData.players]);const currentPlayer=normalizedPlayers.length>0&&(roomData===null||roomData===void 0?void 0:roomData.currentPlayerIndex)!==undefined?normalizedPlayers[roomData.currentPlayerIndex]:null;const isMyTurn=(currentPlayer===null||currentPlayer===void 0?void 0:currentPlayer.id)===playerId;const myPlayer=normalizedPlayers.find(p=>p.id===playerId)||null;const gamePhase=(roomData===null||roomData===void 0?void 0:roomData.gamePhase)||'theme-selection';// Vérifier s'il y a un gagnant\nconst playersWithCards=normalizedPlayers.filter(p=>p.cards&&p.cards.length>0);const playersWithoutCards=normalizedPlayers.filter(p=>!p.cards||p.cards.length===0);const firstWinner=playersWithoutCards.length>0&&roomData!==null&&roomData!==void 0&&roomData.gameStarted?playersWithoutCards[0]:null;const gameEnded=playersWithCards.length<=1&&(roomData===null||roomData===void 0?void 0:roomData.gameStarted)&&playersWithoutCards.length>0;const selectTheme=async theme=>{setLoading(true);try{await updateDoc(doc(db,'rooms',roomCode),{currentTheme:theme,gamePhase:'playing',themeSelectionPhase:false,currentTurnStartTime:Date.now()});}catch(err){console.error('Erreur lors de la sélection du thème:',err);}setLoading(false);};const playCard=async card=>{if(!card||loading||!isMyTurn)return;setLoading(true);try{const playerIndex=normalizedPlayers.findIndex(p=>p.id===playerId);if(playerIndex===-1)return;// Créer une copie des joueurs\nconst updatedPlayers=[...normalizedPlayers];const myCards=[...myPlayer.cards];const cardIndex=myCards.findIndex(c=>c.id===card.id);if(cardIndex===-1)return;// Retirer la carte jouée\nmyCards.splice(cardIndex,1);updatedPlayers[playerIndex]=_objectSpread(_objectSpread({},updatedPlayers[playerIndex]),{},{cards:myCards});let updates={players:updatedPlayers};// Traiter selon le type de carte\nif(card.type==='letter'){// Pour les cartes lettres, on ajoute la carte jouée et on passe en vote\nupdates.lastPlayedCard=_objectSpread(_objectSpread({},card),{},{playerId:playerId,playerName:playerName,timestamp:Date.now()});updates.gamePhase='voting';updates.votingStartTime=Date.now();updates.votes={};}else if(card.type==='joker'){// Joker - pas de malus peu importe la lettre\nupdates.lastPlayedCard=_objectSpread(_objectSpread({},card),{},{playerId:playerId,playerName:playerName,timestamp:Date.now()});updates.gamePhase='voting';updates.votingStartTime=Date.now();updates.votes={};}else if(card.type==='reverse'){// Inverser le sens\nupdates.direction=roomData.direction*-1;updates.lastPlayedCard=card;// Passer au joueur suivant\nconst nextPlayerIndex=getNextPlayerIndex(roomData.currentPlayerIndex,updates.direction,normalizedPlayers);updates.currentPlayerIndex=nextPlayerIndex;updates.currentTurnStartTime=Date.now();updates.gamePhase='playing';}else if(card.type==='stop'){// Sauter le prochain joueur\nupdates.lastPlayedCard=card;const nextIndex=getNextPlayerIndex(roomData.currentPlayerIndex,roomData.direction,normalizedPlayers);const skipIndex=getNextPlayerIndex(nextIndex,roomData.direction,normalizedPlayers);updates.currentPlayerIndex=skipIndex;updates.currentTurnStartTime=Date.now();updates.gamePhase='playing';}else if(card.type==='swap'){// Échanger avec un joueur aléatoire\nconst otherPlayers=normalizedPlayers.filter(p=>p.id!==playerId&&p.cards&&p.cards.length>0);if(otherPlayers.length>0){const randomPlayer=otherPlayers[Math.floor(Math.random()*otherPlayers.length)];const randomPlayerIndex=normalizedPlayers.findIndex(p=>p.id===randomPlayer.id);// Échanger les cartes\nconst tempCards=[...updatedPlayers[playerIndex].cards];updatedPlayers[playerIndex].cards=[...updatedPlayers[randomPlayerIndex].cards];updatedPlayers[randomPlayerIndex].cards=tempCards;updates.lastPlayedCard=_objectSpread(_objectSpread({},card),{},{swappedWith:randomPlayer.name});}// Passer au joueur suivant\nconst nextPlayerIndex=getNextPlayerIndex(roomData.currentPlayerIndex,roomData.direction,normalizedPlayers);updates.currentPlayerIndex=nextPlayerIndex;updates.currentTurnStartTime=Date.now();updates.gamePhase='playing';}else if(card.type==='crakitoko'){// Changement de thème\nupdates.lastPlayedCard=card;updates.themeChoices=card.themes;updates.gamePhase='theme-selection';updates.themeSelectionPhase=true;}await updateDoc(doc(db,'rooms',roomCode),updates);}catch(err){console.error('Erreur lors du jeu de la carte:',err);}setLoading(false);};const submitVote=async voteValue=>{if(loading||!roomData.lastPlayedCard)return;setLoading(true);try{const votes=_objectSpread({},roomData.votes);votes[playerId]=voteValue;await updateDoc(doc(db,'rooms',roomCode),{votes:votes});setVote(voteValue);// Vérifier si tous les votes sont reçus\nconst eligibleVoters=normalizedPlayers.filter(p=>p.id!==roomData.lastPlayedCard.playerId&&p.cards&&p.cards.length>0);if(Object.keys(votes).length>=eligibleVoters.length){// Tous les votes sont reçus, traiter les résultats\nsetTimeout(()=>processVoteResults(votes),1000);}}catch(err){console.error('Erreur lors du vote:',err);}setLoading(false);};const processVoteResults=async votes=>{if(!roomData.lastPlayedCard)return;const voteValues=Object.values(votes);const approvals=voteValues.filter(v=>v===true).length;const rejections=voteValues.filter(v=>v===false).length;const isApproved=approvals>=rejections;const playedPlayerIndex=normalizedPlayers.findIndex(p=>p.id===roomData.lastPlayedCard.playerId);const updatedPlayers=[...normalizedPlayers];let updates={};if(!isApproved){// Réponse refusée - remettre la carte + 1 de la pioche\nif(playedPlayerIndex!==-1){updatedPlayers[playedPlayerIndex].cards.push(roomData.lastPlayedCard);// Ajouter une carte de la pioche\nif(roomData.deck&&roomData.deck.length>0){updatedPlayers[playedPlayerIndex].cards.push(roomData.deck[0]);updates.deck=roomData.deck.slice(1);}}}else if(roomData.lastPlayedCard.type==='letter'){// Réponse acceptée - appliquer les malus pour les cartes lettres seulement\nconst penalty=LETTER_PENALTIES[roomData.lastPlayedCard.letter]||0;if(penalty>0){const nextPlayerIndex=getNextPlayerIndex(roomData.currentPlayerIndex,roomData.direction,normalizedPlayers);if(nextPlayerIndex!==-1&&roomData.deck){for(let i=0;i<penalty&&i<roomData.deck.length;i++){updatedPlayers[nextPlayerIndex].cards.push(roomData.deck[i]);}updates.deck=roomData.deck.slice(penalty);}}}// Pour le joker, pas de malus appliqué\n// Passer au joueur suivant\nconst nextPlayerIndex=getNextPlayerIndex(roomData.currentPlayerIndex,roomData.direction,normalizedPlayers);updates.players=updatedPlayers;updates.currentPlayerIndex=nextPlayerIndex;updates.gamePhase='playing';updates.votes={};updates.votingStartTime=null;updates.currentTurnStartTime=Date.now();await updateDoc(doc(db,'rooms',roomCode),updates);setVote(null);};const handleTimeout=async phase=>{if(phase==='playing'&&isMyTurn){// Timeout pendant le tour - ajouter une carte\nconst playerIndex=normalizedPlayers.findIndex(p=>p.id===playerId);const updatedPlayers=[...normalizedPlayers];if(roomData.deck&&roomData.deck.length>0){updatedPlayers[playerIndex].cards.push(roomData.deck[0]);const nextPlayerIndex=getNextPlayerIndex(roomData.currentPlayerIndex,roomData.direction,normalizedPlayers);await updateDoc(doc(db,'rooms',roomCode),{players:updatedPlayers,deck:roomData.deck.slice(1),currentPlayerIndex:nextPlayerIndex,currentTurnStartTime:Date.now()});}}else if(phase==='voting'){// Timeout du vote - traiter avec les votes actuels\nawait processVoteResults(roomData.votes||{});}};// Réinitialiser le vote quand on change de phase\nuseEffect(()=>{if(gamePhase!=='voting'){setVote(null);}},[gamePhase]);// Conditions de rendu\nif((firstWinner||gameEnded)&&(roomData===null||roomData===void 0?void 0:roomData.gamePhase)!=='theme-selection'){return/*#__PURE__*/_jsx(WinnerPanel,{winner:firstWinner,playersWithoutCards:playersWithoutCards,onLeaveRoom:onLeaveRoom});}if(!roomData||!myPlayer||normalizedPlayers.length===0){return/*#__PURE__*/_jsx(\"div\",{className:\"loading\",children:\"Chargement de la partie...\"});}if(!roomData.gameStarted){return/*#__PURE__*/_jsx(\"div\",{className:\"loading\",children:\"En attente du d\\xE9marrage de la partie...\"});}return/*#__PURE__*/_jsxs(\"div\",{className:\"game\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"game-header\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"room-info\",children:[/*#__PURE__*/_jsxs(\"span\",{className:\"room-code\",children:[\"Salle: \",roomCode]}),/*#__PURE__*/_jsx(\"button\",{onClick:onLeaveRoom,className:\"btn btn-danger leave-btn\",children:\"Quitter\"})]}),roomData.currentTheme&&/*#__PURE__*/_jsxs(\"div\",{className:\"current-theme\",children:[/*#__PURE__*/_jsx(\"h2\",{className:\"theme-title\",children:\"\\uD83C\\uDFAF Th\\xE8me actuel\"}),/*#__PURE__*/_jsx(\"div\",{className:\"theme-display\",children:roomData.currentTheme})]})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"game-table\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"other-players\",children:normalizedPlayers.filter(p=>p.id!==playerId).map(player=>{var _player$cards,_player$cards2;return/*#__PURE__*/_jsxs(\"div\",{className:\"player-slot \".concat(player.id===(currentPlayer===null||currentPlayer===void 0?void 0:currentPlayer.id)?'active-player':''),children:[/*#__PURE__*/_jsx(\"div\",{className:\"player-name\",children:player.name}),/*#__PURE__*/_jsxs(\"div\",{className:\"player-cards-count\",children:[Array.from({length:Math.min(((_player$cards=player.cards)===null||_player$cards===void 0?void 0:_player$cards.length)||0,7)}).map((_,i)=>/*#__PURE__*/_jsx(\"div\",{className:\"card-back\"},i)),((_player$cards2=player.cards)===null||_player$cards2===void 0?void 0:_player$cards2.length)>7&&/*#__PURE__*/_jsxs(\"span\",{className:\"cards-overflow\",children:[\"+\",player.cards.length-7]})]})]},player.id);})}),/*#__PURE__*/_jsx(\"div\",{className:\"center-pile\",children:roomData.lastPlayedCard&&/*#__PURE__*/_jsxs(\"div\",{className:\"last-played-card\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"card card-\".concat(roomData.lastPlayedCard.type),children:[roomData.lastPlayedCard.type==='letter'&&/*#__PURE__*/_jsxs(\"div\",{className:\"letter-card\",children:[/*#__PURE__*/_jsx(\"span\",{className:\"letter\",children:roomData.lastPlayedCard.letter}),/*#__PURE__*/_jsxs(\"span\",{className:\"penalty\",children:[\"+\",LETTER_PENALTIES[roomData.lastPlayedCard.letter]]})]}),roomData.lastPlayedCard.type==='joker'&&/*#__PURE__*/_jsx(\"div\",{className:\"joker-card\",children:\"\\uD83C\\uDCCF JOKER\"}),roomData.lastPlayedCard.type==='reverse'&&/*#__PURE__*/_jsx(\"div\",{className:\"special-card\",children:\"\\uD83D\\uDD04 SENS\"}),roomData.lastPlayedCard.type==='swap'&&/*#__PURE__*/_jsxs(\"div\",{className:\"special-card\",children:[\"\\uD83D\\uDD04 \\xC9CHANGE\",roomData.lastPlayedCard.swappedWith&&/*#__PURE__*/_jsxs(\"span\",{className:\"swap-info\",children:[\"avec \",roomData.lastPlayedCard.swappedWith]})]}),roomData.lastPlayedCard.type==='stop'&&/*#__PURE__*/_jsx(\"div\",{className:\"special-card\",children:\"\\u23F8\\uFE0F STOP\"}),roomData.lastPlayedCard.type==='crakitoko'&&/*#__PURE__*/_jsx(\"div\",{className:\"crakitoko-card\",children:\"\\uD83C\\uDFAF TH\\xC8ME\"})]}),/*#__PURE__*/_jsx(\"div\",{className:\"played-by\",children:roomData.lastPlayedCard.playerName})]})}),/*#__PURE__*/_jsx(\"div\",{className:\"game-direction \".concat(roomData.direction===-1?'reverse':''),children:roomData.direction===1?'↻':'↺'})]}),gamePhase==='theme-selection'&&isMyTurn&&/*#__PURE__*/_jsxs(\"div\",{className:\"theme-selection\",children:[/*#__PURE__*/_jsx(\"h2\",{children:\"\\uD83C\\uDFAF Choisissez un th\\xE8me\"}),/*#__PURE__*/_jsx(\"div\",{className:\"theme-choices\",children:(_roomData$themeChoice=roomData.themeChoices)===null||_roomData$themeChoice===void 0?void 0:_roomData$themeChoice.map((theme,index)=>/*#__PURE__*/_jsx(\"button\",{onClick:()=>selectTheme(theme),className:\"btn btn-theme\",disabled:loading,children:theme},index))})]}),gamePhase==='theme-selection'&&!isMyTurn&&/*#__PURE__*/_jsx(\"div\",{className:\"waiting-theme\",children:/*#__PURE__*/_jsxs(\"p\",{children:[\"\\u23F3 \",currentPlayer===null||currentPlayer===void 0?void 0:currentPlayer.name,\" choisit le th\\xE8me...\"]})}),gamePhase==='playing'&&/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(Timer,{duration:15,onTimeout:()=>handleTimeout('playing'),startTime:roomData.currentTurnStartTime,active:isMyTurn}),/*#__PURE__*/_jsx(\"div\",{className:\"my-cards-area\",children:isMyTurn&&myPlayer!==null&&myPlayer!==void 0&&myPlayer.cards&&myPlayer.cards.length>0?/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(\"h3\",{className:\"your-turn-indicator\",children:\"\\uD83C\\uDFAE \\xC0 votre tour !\"}),/*#__PURE__*/_jsx(\"div\",{className:\"my-cards\",children:myPlayer.cards.map(card=>/*#__PURE__*/_jsxs(\"div\",{className:\"card card-\".concat(card.type,\" playable\"),onClick:()=>playCard(card),children:[card.type==='letter'&&/*#__PURE__*/_jsxs(\"div\",{className:\"letter-card\",children:[/*#__PURE__*/_jsx(\"span\",{className:\"letter\",children:card.letter}),/*#__PURE__*/_jsxs(\"span\",{className:\"penalty\",children:[\"+\",LETTER_PENALTIES[card.letter]]})]}),card.type==='joker'&&/*#__PURE__*/_jsx(\"div\",{className:\"joker-card\",children:\"\\uD83C\\uDCCF JOKER\"}),card.type==='reverse'&&/*#__PURE__*/_jsx(\"div\",{className:\"special-card\",children:\"\\uD83D\\uDD04 SENS\"}),card.type==='swap'&&/*#__PURE__*/_jsx(\"div\",{className:\"special-card\",children:\"\\uD83D\\uDD04 \\xC9CHANGE\"}),card.type==='stop'&&/*#__PURE__*/_jsx(\"div\",{className:\"special-card\",children:\"\\u23F8\\uFE0F STOP\"}),card.type==='crakitoko'&&/*#__PURE__*/_jsx(\"div\",{className:\"crakitoko-card\",children:\"\\uD83C\\uDFAF TH\\xC8ME\"})]},card.id))})]}):myPlayer!==null&&myPlayer!==void 0&&myPlayer.cards&&myPlayer.cards.length>0?/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsxs(\"p\",{className:\"waiting-turn\",children:[\"\\u23F3 Tour de \",currentPlayer===null||currentPlayer===void 0?void 0:currentPlayer.name]}),/*#__PURE__*/_jsx(\"div\",{className:\"my-cards\",children:myPlayer.cards.map(card=>/*#__PURE__*/_jsxs(\"div\",{className:\"card card-\".concat(card.type),children:[card.type==='letter'&&/*#__PURE__*/_jsxs(\"div\",{className:\"letter-card\",children:[/*#__PURE__*/_jsx(\"span\",{className:\"letter\",children:card.letter}),/*#__PURE__*/_jsxs(\"span\",{className:\"penalty\",children:[\"+\",LETTER_PENALTIES[card.letter]]})]}),card.type==='joker'&&/*#__PURE__*/_jsx(\"div\",{className:\"joker-card\",children:\"\\uD83C\\uDCCF JOKER\"}),card.type==='reverse'&&/*#__PURE__*/_jsx(\"div\",{className:\"special-card\",children:\"\\uD83D\\uDD04 SENS\"}),card.type==='swap'&&/*#__PURE__*/_jsx(\"div\",{className:\"special-card\",children:\"\\uD83D\\uDD04 \\xC9CHANGE\"}),card.type==='stop'&&/*#__PURE__*/_jsx(\"div\",{className:\"special-card\",children:\"\\u23F8\\uFE0F STOP\"}),card.type==='crakitoko'&&/*#__PURE__*/_jsx(\"div\",{className:\"crakitoko-card\",children:\"\\uD83C\\uDFAF TH\\xC8ME\"})]},card.id))})]}):/*#__PURE__*/_jsxs(\"div\",{className:\"finished-player\",children:[/*#__PURE__*/_jsx(\"h2\",{children:\"\\uD83C\\uDF89 Vous avez termin\\xE9 !\"}),/*#__PURE__*/_jsx(\"p\",{children:\"Vous n'avez plus de cartes. Regardez les autres joueurs finir la partie.\"})]})})]}),gamePhase==='voting'&&roomData.lastPlayedCard&&/*#__PURE__*/_jsxs(\"div\",{className:\"voting-phase\",children:[/*#__PURE__*/_jsx(Timer,{duration:10,onTimeout:()=>handleTimeout('voting'),startTime:roomData.votingStartTime,active:true}),/*#__PURE__*/_jsxs(\"div\",{className:\"vote-info\",children:[/*#__PURE__*/_jsx(\"h2\",{children:\"\\uD83D\\uDDF3\\uFE0F Vote en cours\"}),/*#__PURE__*/_jsxs(\"p\",{children:[/*#__PURE__*/_jsx(\"strong\",{children:roomData.lastPlayedCard.playerName}),\" affirme pouvoir dire un mot\",roomData.lastPlayedCard.type==='letter'?\" commen\\xE7ant par \".concat(roomData.lastPlayedCard.letter):' avec n\\'importe quelle lettre (Joker)',' ',\"sur le th\\xE8me \\\"\",roomData.currentTheme,\"\\\"\"]})]}),roomData.lastPlayedCard.playerId!==playerId&&myPlayer!==null&&myPlayer!==void 0&&myPlayer.cards&&myPlayer.cards.length>0?/*#__PURE__*/_jsxs(\"div\",{className:\"vote-buttons\",children:[/*#__PURE__*/_jsx(\"button\",{onClick:()=>submitVote(true),disabled:loading||vote!==null,className:\"btn btn-success vote-btn\",children:\"\\u2705 Je pense qu'il/elle peut\"}),/*#__PURE__*/_jsx(\"button\",{onClick:()=>submitVote(false),disabled:loading||vote!==null,className:\"btn btn-danger vote-btn\",children:\"\\u274C Je ne pense pas\"}),vote!==null&&/*#__PURE__*/_jsx(\"p\",{className:\"vote-submitted\",children:\"Vote enregistr\\xE9 !\"})]}):myPlayer!==null&&myPlayer!==void 0&&myPlayer.cards&&myPlayer.cards.length===0?/*#__PURE__*/_jsx(\"div\",{className:\"cannot-vote\",children:/*#__PURE__*/_jsx(\"p\",{children:\"\\uD83C\\uDF89 Vous avez termin\\xE9 ! Vous ne pouvez plus voter.\"})}):/*#__PURE__*/_jsx(\"div\",{className:\"cannot-vote\",children:/*#__PURE__*/_jsx(\"p\",{children:\"\\u23F3 En attente des votes des autres joueurs...\"})}),/*#__PURE__*/_jsx(\"div\",{className:\"vote-progress\",children:/*#__PURE__*/_jsxs(\"p\",{children:[\"Votes re\\xE7us: \",Object.keys(roomData.votes||{}).length,\"/\",Math.max(1,normalizedPlayers.filter(p=>p.id!==roomData.lastPlayedCard.playerId&&p.cards&&p.cards.length>0).length)]})})]})]});}function getNextPlayerIndex(currentIndex,direction,players){const playersWithCards=players.filter(p=>p.cards&&p.cards.length>0);if(playersWithCards.length===0)return-1;let nextIndex=currentIndex;let attempts=0;do{if(direction===1){nextIndex=(nextIndex+1)%players.length;}else{nextIndex=nextIndex===0?players.length-1:nextIndex-1;}attempts++;}while(attempts<players.length&&(!players[nextIndex]||!players[nextIndex].cards||players[nextIndex].cards.length===0));return nextIndex;}export default Game;","map":{"version":3,"names":["React","useState","useEffect","doc","updateDoc","db","Timer","WinnerPanel","jsx","_jsx","jsxs","_jsxs","Fragment","_Fragment","LETTER_PENALTIES","Game","_ref","_roomData$themeChoice","roomCode","playerName","playerId","roomData","onLeaveRoom","vote","setVote","loading","setLoading","normalizedPlayers","useMemo","players","Array","isArray","filter","p","id","name","Object","values","currentPlayer","length","currentPlayerIndex","undefined","isMyTurn","myPlayer","find","gamePhase","playersWithCards","cards","playersWithoutCards","firstWinner","gameStarted","gameEnded","selectTheme","theme","currentTheme","themeSelectionPhase","currentTurnStartTime","Date","now","err","console","error","playCard","card","playerIndex","findIndex","updatedPlayers","myCards","cardIndex","c","splice","_objectSpread","updates","type","lastPlayedCard","timestamp","votingStartTime","votes","direction","nextPlayerIndex","getNextPlayerIndex","nextIndex","skipIndex","otherPlayers","randomPlayer","Math","floor","random","randomPlayerIndex","tempCards","swappedWith","themeChoices","themes","submitVote","voteValue","eligibleVoters","keys","setTimeout","processVoteResults","voteValues","approvals","v","rejections","isApproved","playedPlayerIndex","push","deck","slice","penalty","letter","i","handleTimeout","phase","winner","className","children","onClick","map","player","_player$cards","_player$cards2","concat","from","min","_","index","disabled","duration","onTimeout","startTime","active","max","currentIndex","attempts"],"sources":["C:/Users/lamtm/Downloads/cracklist-web/src/components/Game.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { doc, updateDoc } from 'firebase/firestore';\r\nimport { db } from '../firebase';\r\nimport Timer from './Timer';\r\nimport WinnerPanel from './WinnerPanel';\r\n\r\nconst LETTER_PENALTIES = {\r\n  'A': 0, 'B': 0, 'C': 0, 'D': 0, 'F': 0, 'G': 0, 'L': 0, 'M': 0, 'N': 0, 'P': 0, 'R': 0, 'S': 0, 'T': 0, 'V': 0,\r\n  'E': 1, 'I': 1, 'J': 1, 'O': 1,\r\n  'H': 2, 'K': 2, 'U': 2, 'Y': 2,\r\n  'Q': 3, 'W': 3, 'X': 3, 'Z': 3\r\n};\r\n\r\nfunction Game({ roomCode, playerName, playerId, roomData, onLeaveRoom }) {\r\n  const [vote, setVote] = useState(null);\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  // Normaliser players pour qu'il soit toujours un Array valide\r\n  const normalizedPlayers = React.useMemo(() => {\r\n    if (!roomData?.players) return [];\r\n    \r\n    if (Array.isArray(roomData.players)) {\r\n      return roomData.players.filter(p => p && (p.id || p.name));\r\n    }\r\n    \r\n    if (typeof roomData.players === 'object') {\r\n      return Object.values(roomData.players)\r\n        .filter(p => p && typeof p === 'object' && (p.id || p.name));\r\n    }\r\n    \r\n    return [];\r\n  }, [roomData?.players]);\r\n\r\n  const currentPlayer = normalizedPlayers.length > 0 && roomData?.currentPlayerIndex !== undefined\r\n    ? normalizedPlayers[roomData.currentPlayerIndex] \r\n    : null;\r\n  const isMyTurn = currentPlayer?.id === playerId;\r\n  const myPlayer = normalizedPlayers.find(p => p.id === playerId) || null;\r\n  const gamePhase = roomData?.gamePhase || 'theme-selection';\r\n\r\n  // Vérifier s'il y a un gagnant\r\n  const playersWithCards = normalizedPlayers.filter(p => p.cards && p.cards.length > 0);\r\n  const playersWithoutCards = normalizedPlayers.filter(p => !p.cards || p.cards.length === 0);\r\n  \r\n  const firstWinner = playersWithoutCards.length > 0 && roomData?.gameStarted ? playersWithoutCards[0] : null;\r\n  const gameEnded = playersWithCards.length <= 1 && roomData?.gameStarted && playersWithoutCards.length > 0;\r\n\r\n  const selectTheme = async (theme) => {\r\n    setLoading(true);\r\n    try {\r\n      await updateDoc(doc(db, 'rooms', roomCode), {\r\n        currentTheme: theme,\r\n        gamePhase: 'playing',\r\n        themeSelectionPhase: false,\r\n        currentTurnStartTime: Date.now()\r\n      });\r\n    } catch (err) {\r\n      console.error('Erreur lors de la sélection du thème:', err);\r\n    }\r\n    setLoading(false);\r\n  };\r\n\r\n  const playCard = async (card) => {\r\n    if (!card || loading || !isMyTurn) return;\r\n\r\n    setLoading(true);\r\n    try {\r\n      const playerIndex = normalizedPlayers.findIndex(p => p.id === playerId);\r\n      if (playerIndex === -1) return;\r\n\r\n      // Créer une copie des joueurs\r\n      const updatedPlayers = [...normalizedPlayers];\r\n      const myCards = [...myPlayer.cards];\r\n      const cardIndex = myCards.findIndex(c => c.id === card.id);\r\n      \r\n      if (cardIndex === -1) return;\r\n\r\n      // Retirer la carte jouée\r\n      myCards.splice(cardIndex, 1);\r\n      updatedPlayers[playerIndex] = {\r\n        ...updatedPlayers[playerIndex],\r\n        cards: myCards\r\n      };\r\n\r\n      let updates = {\r\n        players: updatedPlayers\r\n      };\r\n\r\n      // Traiter selon le type de carte\r\n      if (card.type === 'letter') {\r\n        // Pour les cartes lettres, on ajoute la carte jouée et on passe en vote\r\n        updates.lastPlayedCard = {\r\n          ...card,\r\n          playerId: playerId,\r\n          playerName: playerName,\r\n          timestamp: Date.now()\r\n        };\r\n        updates.gamePhase = 'voting';\r\n        updates.votingStartTime = Date.now();\r\n        updates.votes = {};\r\n\r\n      } else if (card.type === 'joker') {\r\n        // Joker - pas de malus peu importe la lettre\r\n        updates.lastPlayedCard = {\r\n          ...card,\r\n          playerId: playerId,\r\n          playerName: playerName,\r\n          timestamp: Date.now()\r\n        };\r\n        updates.gamePhase = 'voting';\r\n        updates.votingStartTime = Date.now();\r\n        updates.votes = {};\r\n\r\n      } else if (card.type === 'reverse') {\r\n        // Inverser le sens\r\n        updates.direction = roomData.direction * -1;\r\n        updates.lastPlayedCard = card;\r\n        \r\n        // Passer au joueur suivant\r\n        const nextPlayerIndex = getNextPlayerIndex(roomData.currentPlayerIndex, updates.direction, normalizedPlayers);\r\n        updates.currentPlayerIndex = nextPlayerIndex;\r\n        updates.currentTurnStartTime = Date.now();\r\n        updates.gamePhase = 'playing';\r\n        \r\n      } else if (card.type === 'stop') {\r\n        // Sauter le prochain joueur\r\n        updates.lastPlayedCard = card;\r\n        const nextIndex = getNextPlayerIndex(roomData.currentPlayerIndex, roomData.direction, normalizedPlayers);\r\n        const skipIndex = getNextPlayerIndex(nextIndex, roomData.direction, normalizedPlayers);\r\n        updates.currentPlayerIndex = skipIndex;\r\n        updates.currentTurnStartTime = Date.now();\r\n        updates.gamePhase = 'playing';\r\n        \r\n      } else if (card.type === 'swap') {\r\n        // Échanger avec un joueur aléatoire\r\n        const otherPlayers = normalizedPlayers.filter(p => p.id !== playerId && p.cards && p.cards.length > 0);\r\n        if (otherPlayers.length > 0) {\r\n          const randomPlayer = otherPlayers[Math.floor(Math.random() * otherPlayers.length)];\r\n          const randomPlayerIndex = normalizedPlayers.findIndex(p => p.id === randomPlayer.id);\r\n          \r\n          // Échanger les cartes\r\n          const tempCards = [...updatedPlayers[playerIndex].cards];\r\n          updatedPlayers[playerIndex].cards = [...updatedPlayers[randomPlayerIndex].cards];\r\n          updatedPlayers[randomPlayerIndex].cards = tempCards;\r\n          \r\n          updates.lastPlayedCard = {\r\n            ...card,\r\n            swappedWith: randomPlayer.name\r\n          };\r\n        }\r\n        \r\n        // Passer au joueur suivant\r\n        const nextPlayerIndex = getNextPlayerIndex(roomData.currentPlayerIndex, roomData.direction, normalizedPlayers);\r\n        updates.currentPlayerIndex = nextPlayerIndex;\r\n        updates.currentTurnStartTime = Date.now();\r\n        updates.gamePhase = 'playing';\r\n        \r\n      } else if (card.type === 'crakitoko') {\r\n        // Changement de thème\r\n        updates.lastPlayedCard = card;\r\n        updates.themeChoices = card.themes;\r\n        updates.gamePhase = 'theme-selection';\r\n        updates.themeSelectionPhase = true;\r\n      }\r\n\r\n      await updateDoc(doc(db, 'rooms', roomCode), updates);\r\n\r\n    } catch (err) {\r\n      console.error('Erreur lors du jeu de la carte:', err);\r\n    }\r\n    setLoading(false);\r\n  };\r\n\r\n  const submitVote = async (voteValue) => {\r\n    if (loading || !roomData.lastPlayedCard) return;\r\n\r\n    setLoading(true);\r\n    try {\r\n      const votes = { ...roomData.votes };\r\n      votes[playerId] = voteValue;\r\n\r\n      await updateDoc(doc(db, 'rooms', roomCode), {\r\n        votes: votes\r\n      });\r\n\r\n      setVote(voteValue);\r\n\r\n      // Vérifier si tous les votes sont reçus\r\n      const eligibleVoters = normalizedPlayers.filter(p => \r\n        p.id !== roomData.lastPlayedCard.playerId && \r\n        p.cards && \r\n        p.cards.length > 0\r\n      );\r\n\r\n      if (Object.keys(votes).length >= eligibleVoters.length) {\r\n        // Tous les votes sont reçus, traiter les résultats\r\n        setTimeout(() => processVoteResults(votes), 1000);\r\n      }\r\n    } catch (err) {\r\n      console.error('Erreur lors du vote:', err);\r\n    }\r\n    setLoading(false);\r\n  };\r\n\r\n  const processVoteResults = async (votes) => {\r\n    if (!roomData.lastPlayedCard) return;\r\n\r\n    const voteValues = Object.values(votes);\r\n    const approvals = voteValues.filter(v => v === true).length;\r\n    const rejections = voteValues.filter(v => v === false).length;\r\n    const isApproved = approvals >= rejections;\r\n\r\n    const playedPlayerIndex = normalizedPlayers.findIndex(p => p.id === roomData.lastPlayedCard.playerId);\r\n    const updatedPlayers = [...normalizedPlayers];\r\n    let updates = {};\r\n\r\n    if (!isApproved) {\r\n      // Réponse refusée - remettre la carte + 1 de la pioche\r\n      if (playedPlayerIndex !== -1) {\r\n        updatedPlayers[playedPlayerIndex].cards.push(roomData.lastPlayedCard);\r\n        \r\n        // Ajouter une carte de la pioche\r\n        if (roomData.deck && roomData.deck.length > 0) {\r\n          updatedPlayers[playedPlayerIndex].cards.push(roomData.deck[0]);\r\n          updates.deck = roomData.deck.slice(1);\r\n        }\r\n      }\r\n    } else if (roomData.lastPlayedCard.type === 'letter') {\r\n      // Réponse acceptée - appliquer les malus pour les cartes lettres seulement\r\n      const penalty = LETTER_PENALTIES[roomData.lastPlayedCard.letter] || 0;\r\n      \r\n      if (penalty > 0) {\r\n        const nextPlayerIndex = getNextPlayerIndex(roomData.currentPlayerIndex, roomData.direction, normalizedPlayers);\r\n        \r\n        if (nextPlayerIndex !== -1 && roomData.deck) {\r\n          for (let i = 0; i < penalty && i < roomData.deck.length; i++) {\r\n            updatedPlayers[nextPlayerIndex].cards.push(roomData.deck[i]);\r\n          }\r\n          updates.deck = roomData.deck.slice(penalty);\r\n        }\r\n      }\r\n    }\r\n    // Pour le joker, pas de malus appliqué\r\n\r\n    // Passer au joueur suivant\r\n    const nextPlayerIndex = getNextPlayerIndex(roomData.currentPlayerIndex, roomData.direction, normalizedPlayers);\r\n    \r\n    updates.players = updatedPlayers;\r\n    updates.currentPlayerIndex = nextPlayerIndex;\r\n    updates.gamePhase = 'playing';\r\n    updates.votes = {};\r\n    updates.votingStartTime = null;\r\n    updates.currentTurnStartTime = Date.now();\r\n\r\n    await updateDoc(doc(db, 'rooms', roomCode), updates);\r\n    setVote(null);\r\n  };\r\n\r\n  const handleTimeout = async (phase) => {\r\n    if (phase === 'playing' && isMyTurn) {\r\n      // Timeout pendant le tour - ajouter une carte\r\n      const playerIndex = normalizedPlayers.findIndex(p => p.id === playerId);\r\n      const updatedPlayers = [...normalizedPlayers];\r\n      \r\n      if (roomData.deck && roomData.deck.length > 0) {\r\n        updatedPlayers[playerIndex].cards.push(roomData.deck[0]);\r\n        \r\n        const nextPlayerIndex = getNextPlayerIndex(roomData.currentPlayerIndex, roomData.direction, normalizedPlayers);\r\n        \r\n        await updateDoc(doc(db, 'rooms', roomCode), {\r\n          players: updatedPlayers,\r\n          deck: roomData.deck.slice(1),\r\n          currentPlayerIndex: nextPlayerIndex,\r\n          currentTurnStartTime: Date.now()\r\n        });\r\n      }\r\n    } else if (phase === 'voting') {\r\n      // Timeout du vote - traiter avec les votes actuels\r\n      await processVoteResults(roomData.votes || {});\r\n    }\r\n  };\r\n\r\n  // Réinitialiser le vote quand on change de phase\r\n  useEffect(() => {\r\n    if (gamePhase !== 'voting') {\r\n      setVote(null);\r\n    }\r\n  }, [gamePhase]);\r\n\r\n  // Conditions de rendu\r\n  if ((firstWinner || gameEnded) && roomData?.gamePhase !== 'theme-selection') {\r\n    return <WinnerPanel winner={firstWinner} playersWithoutCards={playersWithoutCards} onLeaveRoom={onLeaveRoom} />;\r\n  }\r\n\r\n  if (!roomData || !myPlayer || normalizedPlayers.length === 0) {\r\n    return <div className=\"loading\">Chargement de la partie...</div>;\r\n  }\r\n\r\n  if (!roomData.gameStarted) {\r\n    return <div className=\"loading\">En attente du démarrage de la partie...</div>;\r\n  }\r\n\r\n  return (\r\n    <div className=\"game\">\r\n      <div className=\"game-header\">\r\n        <div className=\"room-info\">\r\n          <span className=\"room-code\">Salle: {roomCode}</span>\r\n          <button onClick={onLeaveRoom} className=\"btn btn-danger leave-btn\">\r\n            Quitter\r\n          </button>\r\n        </div>\r\n        \r\n        {roomData.currentTheme && (\r\n          <div className=\"current-theme\">\r\n            <h2 className=\"theme-title\">🎯 Thème actuel</h2>\r\n            <div className=\"theme-display\">{roomData.currentTheme}</div>\r\n          </div>\r\n        )}\r\n      </div>\r\n\r\n      {/* Zone de jeu centrale style UNO */}\r\n      <div className=\"game-table\">\r\n        {/* Afficher les autres joueurs en haut */}\r\n        <div className=\"other-players\">\r\n          {normalizedPlayers.filter(p => p.id !== playerId).map((player) => (\r\n            <div \r\n              key={player.id} \r\n              className={`player-slot ${player.id === currentPlayer?.id ? 'active-player' : ''}`}\r\n            >\r\n              <div className=\"player-name\">{player.name}</div>\r\n              <div className=\"player-cards-count\">\r\n                {Array.from({ length: Math.min(player.cards?.length || 0, 7) }).map((_, i) => (\r\n                  <div key={i} className=\"card-back\"></div>\r\n                ))}\r\n                {player.cards?.length > 7 && <span className=\"cards-overflow\">+{player.cards.length - 7}</span>}\r\n              </div>\r\n            </div>\r\n          ))}\r\n        </div>\r\n\r\n        {/* Pile centrale */}\r\n        <div className=\"center-pile\">\r\n          {roomData.lastPlayedCard && (\r\n            <div className=\"last-played-card\">\r\n              <div className={`card card-${roomData.lastPlayedCard.type}`}>\r\n                {roomData.lastPlayedCard.type === 'letter' && (\r\n                  <div className=\"letter-card\">\r\n                    <span className=\"letter\">{roomData.lastPlayedCard.letter}</span>\r\n                    <span className=\"penalty\">+{LETTER_PENALTIES[roomData.lastPlayedCard.letter]}</span>\r\n                  </div>\r\n                )}\r\n                {roomData.lastPlayedCard.type === 'joker' && (\r\n                  <div className=\"joker-card\">🃏 JOKER</div>\r\n                )}\r\n                {roomData.lastPlayedCard.type === 'reverse' && (\r\n                  <div className=\"special-card\">🔄 SENS</div>\r\n                )}\r\n                {roomData.lastPlayedCard.type === 'swap' && (\r\n                  <div className=\"special-card\">\r\n                    🔄 ÉCHANGE\r\n                    {roomData.lastPlayedCard.swappedWith && (\r\n                      <span className=\"swap-info\">avec {roomData.lastPlayedCard.swappedWith}</span>\r\n                    )}\r\n                  </div>\r\n                )}\r\n                {roomData.lastPlayedCard.type === 'stop' && (\r\n                  <div className=\"special-card\">⏸️ STOP</div>\r\n                )}\r\n                {roomData.lastPlayedCard.type === 'crakitoko' && (\r\n                  <div className=\"crakitoko-card\">🎯 THÈME</div>\r\n                )}\r\n              </div>\r\n              <div className=\"played-by\">\r\n                {roomData.lastPlayedCard.playerName}\r\n              </div>\r\n            </div>\r\n          )}\r\n        </div>\r\n\r\n        {/* Direction du jeu */}\r\n        <div className={`game-direction ${roomData.direction === -1 ? 'reverse' : ''}`}>\r\n          {roomData.direction === 1 ? '↻' : '↺'}\r\n        </div>\r\n      </div>\r\n\r\n      {/* Phase de sélection de thème */}\r\n      {gamePhase === 'theme-selection' && isMyTurn && (\r\n        <div className=\"theme-selection\">\r\n          <h2>🎯 Choisissez un thème</h2>\r\n          <div className=\"theme-choices\">\r\n            {roomData.themeChoices?.map((theme, index) => (\r\n              <button\r\n                key={index}\r\n                onClick={() => selectTheme(theme)}\r\n                className=\"btn btn-theme\"\r\n                disabled={loading}\r\n              >\r\n                {theme}\r\n              </button>\r\n            ))}\r\n          </div>\r\n        </div>\r\n      )}\r\n\r\n      {gamePhase === 'theme-selection' && !isMyTurn && (\r\n        <div className=\"waiting-theme\">\r\n          <p>⏳ {currentPlayer?.name} choisit le thème...</p>\r\n        </div>\r\n      )}\r\n\r\n      {/* Phase de jeu */}\r\n      {gamePhase === 'playing' && (\r\n        <>\r\n          <Timer\r\n            duration={15}\r\n            onTimeout={() => handleTimeout('playing')}\r\n            startTime={roomData.currentTurnStartTime}\r\n            active={isMyTurn}\r\n          />\r\n\r\n          {/* Mes cartes en bas */}\r\n          <div className=\"my-cards-area\">\r\n            {isMyTurn && myPlayer?.cards && myPlayer.cards.length > 0 ? (\r\n              <>\r\n                <h3 className=\"your-turn-indicator\">🎮 À votre tour !</h3>\r\n                <div className=\"my-cards\">\r\n                  {myPlayer.cards.map((card) => (\r\n                    <div\r\n                      key={card.id}\r\n                      className={`card card-${card.type} playable`}\r\n                      onClick={() => playCard(card)}\r\n                    >\r\n                      {card.type === 'letter' && (\r\n                        <div className=\"letter-card\">\r\n                          <span className=\"letter\">{card.letter}</span>\r\n                          <span className=\"penalty\">+{LETTER_PENALTIES[card.letter]}</span>\r\n                        </div>\r\n                      )}\r\n                      {card.type === 'joker' && (\r\n                        <div className=\"joker-card\">🃏 JOKER</div>\r\n                      )}\r\n                      {card.type === 'reverse' && (\r\n                        <div className=\"special-card\">🔄 SENS</div>\r\n                      )}\r\n                      {card.type === 'swap' && (\r\n                        <div className=\"special-card\">🔄 ÉCHANGE</div>\r\n                      )}\r\n                      {card.type === 'stop' && (\r\n                        <div className=\"special-card\">⏸️ STOP</div>\r\n                      )}\r\n                      {card.type === 'crakitoko' && (\r\n                        <div className=\"crakitoko-card\">🎯 THÈME</div>\r\n                      )}\r\n                    </div>\r\n                  ))}\r\n                </div>\r\n              </>\r\n            ) : myPlayer?.cards && myPlayer.cards.length > 0 ? (\r\n              <>\r\n                <p className=\"waiting-turn\">⏳ Tour de {currentPlayer?.name}</p>\r\n                <div className=\"my-cards\">\r\n                  {myPlayer.cards.map((card) => (\r\n                    <div\r\n                      key={card.id}\r\n                      className={`card card-${card.type}`}\r\n                    >\r\n                      {card.type === 'letter' && (\r\n                        <div className=\"letter-card\">\r\n                          <span className=\"letter\">{card.letter}</span>\r\n                          <span className=\"penalty\">+{LETTER_PENALTIES[card.letter]}</span>\r\n                        </div>\r\n                      )}\r\n                      {card.type === 'joker' && (\r\n                        <div className=\"joker-card\">🃏 JOKER</div>\r\n                      )}\r\n                      {card.type === 'reverse' && (\r\n                        <div className=\"special-card\">🔄 SENS</div>\r\n                      )}\r\n                      {card.type === 'swap' && (\r\n                        <div className=\"special-card\">🔄 ÉCHANGE</div>\r\n                      )}\r\n                      {card.type === 'stop' && (\r\n                        <div className=\"special-card\">⏸️ STOP</div>\r\n                      )}\r\n                      {card.type === 'crakitoko' && (\r\n                        <div className=\"crakitoko-card\">🎯 THÈME</div>\r\n                      )}\r\n                    </div>\r\n                  ))}\r\n                </div>\r\n              </>\r\n            ) : (\r\n              <div className=\"finished-player\">\r\n                <h2>🎉 Vous avez terminé !</h2>\r\n                <p>Vous n'avez plus de cartes. Regardez les autres joueurs finir la partie.</p>\r\n              </div>\r\n            )}\r\n          </div>\r\n        </>\r\n      )}\r\n\r\n      {/* Phase de vote */}\r\n      {gamePhase === 'voting' && roomData.lastPlayedCard && (\r\n        <div className=\"voting-phase\">\r\n          <Timer\r\n            duration={10}\r\n            onTimeout={() => handleTimeout('voting')}\r\n            startTime={roomData.votingStartTime}\r\n            active={true}\r\n          />\r\n\r\n          <div className=\"vote-info\">\r\n            <h2>🗳️ Vote en cours</h2>\r\n            <p>\r\n              <strong>{roomData.lastPlayedCard.playerName}</strong> affirme pouvoir dire un mot \r\n              {roomData.lastPlayedCard.type === 'letter' ? \r\n                ` commençant par ${roomData.lastPlayedCard.letter}` : \r\n                ' avec n\\'importe quelle lettre (Joker)'\r\n              }\r\n              {' '}sur le thème \"{roomData.currentTheme}\"\r\n            </p>\r\n          </div>\r\n\r\n          {roomData.lastPlayedCard.playerId !== playerId && myPlayer?.cards && myPlayer.cards.length > 0 ? (\r\n            <div className=\"vote-buttons\">\r\n              <button\r\n                onClick={() => submitVote(true)}\r\n                disabled={loading || vote !== null}\r\n                className=\"btn btn-success vote-btn\"\r\n              >\r\n                ✅ Je pense qu'il/elle peut\r\n              </button>\r\n              <button\r\n                onClick={() => submitVote(false)}\r\n                disabled={loading || vote !== null}\r\n                className=\"btn btn-danger vote-btn\"\r\n              >\r\n                ❌ Je ne pense pas\r\n              </button>\r\n              {vote !== null && (\r\n                <p className=\"vote-submitted\">Vote enregistré !</p>\r\n              )}\r\n            </div>\r\n          ) : myPlayer?.cards && myPlayer.cards.length === 0 ? (\r\n            <div className=\"cannot-vote\">\r\n              <p>🎉 Vous avez terminé ! Vous ne pouvez plus voter.</p>\r\n            </div>\r\n          ) : (\r\n            <div className=\"cannot-vote\">\r\n              <p>⏳ En attente des votes des autres joueurs...</p>\r\n            </div>\r\n          )}\r\n\r\n          <div className=\"vote-progress\">\r\n            <p>Votes reçus: {Object.keys(roomData.votes || {}).length}/{Math.max(1, normalizedPlayers.filter(p => p.id !== roomData.lastPlayedCard.playerId && p.cards && p.cards.length > 0).length)}</p>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction getNextPlayerIndex(currentIndex, direction, players) {\r\n  const playersWithCards = players.filter(p => p.cards && p.cards.length > 0);\r\n  if (playersWithCards.length === 0) return -1;\r\n\r\n  let nextIndex = currentIndex;\r\n  let attempts = 0;\r\n  \r\n  do {\r\n    if (direction === 1) {\r\n      nextIndex = (nextIndex + 1) % players.length;\r\n    } else {\r\n      nextIndex = nextIndex === 0 ? players.length - 1 : nextIndex - 1;\r\n    }\r\n    attempts++;\r\n  } while (attempts < players.length && (!players[nextIndex] || !players[nextIndex].cards || players[nextIndex].cards.length === 0));\r\n  \r\n  return nextIndex;\r\n}\r\n\r\nexport default Game;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}